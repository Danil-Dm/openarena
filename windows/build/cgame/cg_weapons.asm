code
proc CG_MachineGunEjectBrass 136 8
file "../../../code/cgame/cg_weapons.c"
line 32
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// cg_weapons.c -- events and effects dealing with weapons
;24:#include "cg_local.h"
;25:
;26:/*
;27:==========================
;28:CG_MachineGunEjectBrass
;29:==========================
;30:*/
;31:static void CG_MachineGunEjectBrass( centity_t *cent )
;32:{
line 37
;33:	localEntity_t	*le;
;34:	refEntity_t		*re;
;35:	vec3_t			velocity, xvelocity;
;36:	vec3_t			offset, xoffset;
;37:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 40
;38:	vec3_t			v[3];
;39:
;40:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $75
line 41
;41:		return;
ADDRGP4 $74
JUMPV
LABELV $75
line 44
;42:	}
;43:
;44:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 45
;45:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 47
;46:
;47:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 48
;48:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1109393408
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 49
;49:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 51
;50:
;51:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 52
;52:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 53
;53:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 55
;54:
;55:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 56
;56:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 58
;57:
;58:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 60
;59:
;60:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 61
;61:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 62
;62:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 64
;63:
;64:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 65
;65:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 66
;66:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 67
;67:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 69
;68:
;69:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 71
;70:
;71:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $108
line 72
;72:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 73
;73:	}
LABELV $108
line 75
;74:
;75:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 76
;76:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 77
;77:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 78
;78:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 80
;79:
;80:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 81
;81:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+180268+244
INDIRI4
ASGNI4
line 83
;82:
;83:	if (cg_leiBrassNoise.integer)
ADDRGP4 cg_leiBrassNoise+12
INDIRI4
CNSTI4 0
EQI4 $134
line 84
;84:		le->bounceFactor = 0.6f * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRGP4 $135
JUMPV
LABELV $134
line 86
;85:	else
;86:		le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1053609165
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
LABELV $135
line 88
;87:
;88:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 89
;89:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 90
;90:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 91
;91:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 92
;92:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 93
;93:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 94
;94:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 95
;95:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 97
;96:
;97:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 98
;98:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 99
;99:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 100
;100:}
LABELV $74
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 110
;101:
;102:
;103:
;104:/*
;105:==========================
;106:CG_ShotgunEjectBrass
;107:==========================
;108:*/
;109:static void CG_ShotgunEjectBrass( centity_t *cent )
;110:{
line 118
;111:	localEntity_t	*le;
;112:	refEntity_t		*re;
;113:	vec3_t			velocity, xvelocity;
;114:	vec3_t			offset, xoffset;
;115:	vec3_t			v[3];
;116:	int				i;
;117:
;118:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $139
line 119
;119:		return;
ADDRGP4 $138
JUMPV
LABELV $139
line 122
;120:	}
;121:
;122:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $142
line 123
;123:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 125
;124:
;125:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 126
;126:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 128
;127:
;128:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1114636288
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 129
;129:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $146
line 130
;130:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 131
;131:		}
ADDRGP4 $147
JUMPV
LABELV $146
line 132
;132:		else {
line 133
;133:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 134
;134:		}
LABELV $147
line 135
;135:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 137
;136:
;137:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 138
;138:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 139
;139:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 3
ADDRGP4 cg_brassTime+12
INDIRI4
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 141
;140:
;141:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 142
;142:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 144
;143:
;144:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 146
;145:
;146:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 147
;147:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 148
;148:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 150
;149:
;150:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 151
;151:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 152
;152:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 153
;153:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 154
;154:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 155
;155:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $179
line 156
;156:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 157
;157:		}
LABELV $179
line 159
;158:
;159:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 160
;160:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 161
;161:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 162
;162:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 164
;163:
;164:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 165
;165:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+180268+248
INDIRI4
ASGNI4
line 166
;166:		if (cg_leiBrassNoise.integer)
ADDRGP4 cg_leiBrassNoise+12
INDIRI4
CNSTI4 0
EQI4 $205
line 167
;167:			le->bounceFactor = 0.5f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRGP4 $206
JUMPV
LABELV $205
line 169
;168:		else
;169:			le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
LABELV $206
line 171
;170:
;171:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 172
;172:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 173
;173:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 174
;174:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 175
;175:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 176
;176:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 177
;177:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 178
;178:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 180
;179:
;180:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 181
;181:		le->leBounceSoundType = LEBS_SHELL; // LEILEI shell noises
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 3
ASGNI4
line 182
;182:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 183
;183:	}
LABELV $143
line 122
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $142
line 184
;184:}
LABELV $138
endproc CG_ShotgunEjectBrass 136 8
proc CG_NailgunEjectBrass 108 48
line 194
;185:
;186:
;187://#ifdef MISSIONPACK
;188:/*
;189:==========================
;190:CG_NailgunEjectBrass
;191:==========================
;192:*/
;193:static void CG_NailgunEjectBrass( centity_t *cent )
;194:{
line 202
;195:	localEntity_t	*smoke;
;196:	vec3_t			origin;
;197:	vec3_t			v[3];
;198:	vec3_t			offset;
;199:	vec3_t			xoffset;
;200:	vec3_t			up;
;201:
;202:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 204
;203:
;204:	offset[0] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 205
;205:	offset[1] = -12;
ADDRLP4 0+4
CNSTF4 3242196992
ASGNF4
line 206
;206:	offset[2] = 24;
ADDRLP4 0+8
CNSTF4 1103101952
ASGNF4
line 208
;207:
;208:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 48
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 209
;209:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 48+4
ADDRLP4 0
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 210
;210:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 48+8
ADDRLP4 0
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 211
;211:	VectorAdd( cent->lerpOrigin, xoffset, origin );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 88
INDIRP4
CNSTI4 776
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+4
ADDRLP4 88
INDIRP4
CNSTI4 780
ADDP4
INDIRF4
ADDRLP4 48+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+8
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRF4
ADDRLP4 48+8
INDIRF4
ADDF4
ASGNF4
line 213
;212:
;213:	VectorSet( up, 0, 0, 64 );
ADDRLP4 92
CNSTF4 0
ASGNF4
ADDRLP4 72
ADDRLP4 92
INDIRF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 92
INDIRF4
ASGNF4
ADDRLP4 72+8
CNSTF4 1115684864
ASGNF4
line 215
;214:
;215:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1143930880
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRLP4 100
INDIRI4
ARGI4
ADDRLP4 100
INDIRI4
ARGI4
ADDRGP4 cgs+180268+340
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 104
INDIRP4
ASGNP4
line 217
;216:	// use the optimized local entity add
;217:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 84
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 218
;218:}
LABELV $209
endproc CG_NailgunEjectBrass 108 48
export CG_RailTrail
proc CG_RailTrail 648 16
line 228
;219://#endif
;220:
;221:
;222:/*
;223:==========================
;224:CG_RailTrail
;225:==========================
;226:*/
;227:void CG_RailTrail (clientInfo_t *ci, vec3_t start, vec3_t end)
;228:{
line 240
;229:	vec3_t axis[36], move, move2, vec, temp;
;230:	float  len;
;231:	int    i, j, skip;
;232:
;233:	localEntity_t *le;
;234:	refEntity_t   *re;
;235:
;236:#define RADIUS   4
;237:#define ROTATION 1
;238:#define SPACING  5
;239:
;240:	start[2] -= 4;
ADDRLP4 504
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 504
INDIRP4
ADDRLP4 504
INDIRP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 242
;241:
;242:	le = CG_AllocLocalEntity();
ADDRLP4 508
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 508
INDIRP4
ASGNP4
line 243
;243:	re = &le->refEntity;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 245
;244:
;245:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 246
;246:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 247
;247:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 248
;248:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 250
;249:
;250:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 251
;251:	re->reType = RT_RAIL_CORE;
ADDRLP4 20
INDIRP4
CNSTI4 4
ASGNI4
line 252
;252:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+256
INDIRI4
ASGNI4
line 254
;253:
;254:	VectorCopy(start, re->origin);
ADDRLP4 20
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 255
;255:	VectorCopy(end, re->oldorigin);
ADDRLP4 20
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 257
;256:
;257:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 520
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 524
CNSTF4 1325400064
ASGNF4
ADDRLP4 520
INDIRF4
ADDRLP4 524
INDIRF4
LTF4 $249
ADDRLP4 516
ADDRLP4 520
INDIRF4
ADDRLP4 524
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $250
JUMPV
LABELV $249
ADDRLP4 516
ADDRLP4 520
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $250
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 516
INDIRU4
CVUU1 4
ASGNU1
line 258
;258:	re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 532
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 536
CNSTF4 1325400064
ASGNF4
ADDRLP4 532
INDIRF4
ADDRLP4 536
INDIRF4
LTF4 $252
ADDRLP4 528
ADDRLP4 532
INDIRF4
ADDRLP4 536
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $253
JUMPV
LABELV $252
ADDRLP4 528
ADDRLP4 532
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $253
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 528
INDIRU4
CVUU1 4
ASGNU1
line 259
;259:	re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 544
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 548
CNSTF4 1325400064
ASGNF4
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
LTF4 $255
ADDRLP4 540
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $256
JUMPV
LABELV $255
ADDRLP4 540
ADDRLP4 544
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $256
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 540
INDIRU4
CVUU1 4
ASGNU1
line 260
;260:	re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 262
;261:
;262:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
line 263
;263:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
line 264
;264:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
line 265
;265:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 267
;266:
;267:	AxisClear( re->axis );
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 269
;268:
;269:	if (cg_oldRail.integer) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $257
line 271
;270:		// nudge down a bit so it isn't exactly in center
;271:		re->origin[2] -= 8;
ADDRLP4 552
ADDRLP4 20
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 552
INDIRP4
ADDRLP4 552
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 272
;272:		re->oldorigin[2] -= 8;
ADDRLP4 556
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 556
INDIRP4
ADDRLP4 556
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 275
;273:
;274:		// leilei - reimplementing the rail discs that were removed in 1.30
;275:		if (cg_oldRail.integer > 1) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 1
LEI4 $241
line 277
;276:
;277:			le = CG_AllocLocalEntity();
ADDRLP4 560
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 560
INDIRP4
ASGNP4
line 278
;278:			re = &le->refEntity;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 280
;279:
;280:			VectorCopy(start, re->origin);
ADDRLP4 20
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 281
;281:			VectorCopy(end, re->oldorigin);
ADDRLP4 20
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 282
;282:			le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 283
;283:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 284
;284:			le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 285
;285:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 287
;286:
;287:			re->shaderTime = cg.time / 1000.0f;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 288
;288:			re->reType = RT_RAIL_RINGS;
ADDRLP4 20
INDIRP4
CNSTI4 5
ASGNI4
line 289
;289:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+252
INDIRI4
ASGNI4
line 290
;290:			re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 572
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 576
CNSTF4 1325400064
ASGNF4
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
LTF4 $270
ADDRLP4 568
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $271
JUMPV
LABELV $270
ADDRLP4 568
ADDRLP4 572
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $271
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 568
INDIRU4
CVUU1 4
ASGNU1
line 291
;291:			re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 584
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 588
CNSTF4 1325400064
ASGNF4
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
LTF4 $273
ADDRLP4 580
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $274
JUMPV
LABELV $273
ADDRLP4 580
ADDRLP4 584
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $274
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 580
INDIRU4
CVUU1 4
ASGNU1
line 292
;292:			re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 596
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 600
CNSTF4 1325400064
ASGNF4
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
LTF4 $276
ADDRLP4 592
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $277
JUMPV
LABELV $276
ADDRLP4 592
ADDRLP4 596
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $277
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 592
INDIRU4
CVUU1 4
ASGNU1
line 293
;293:			re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 295
;294:
;295:			le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
line 296
;296:			le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
line 297
;297:			le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
line 298
;298:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 300
;299:
;300:			re->origin[2] -= 8;
ADDRLP4 604
ADDRLP4 20
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 604
INDIRP4
ADDRLP4 604
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 301
;301:			re->oldorigin[2] -= 8;
ADDRLP4 608
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 608
INDIRP4
ADDRLP4 608
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 303
;302:
;303:			if (cg_oldRail.integer > 2) {		// use the secondary color instead
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 2
LEI4 $241
line 304
;304:				re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 616
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 620
CNSTF4 1325400064
ASGNF4
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
LTF4 $282
ADDRLP4 612
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $283
JUMPV
LABELV $282
ADDRLP4 612
ADDRLP4 616
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $283
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 612
INDIRU4
CVUU1 4
ASGNU1
line 305
;305:				re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 628
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 632
CNSTF4 1325400064
ASGNF4
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
LTF4 $285
ADDRLP4 624
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $286
JUMPV
LABELV $285
ADDRLP4 624
ADDRLP4 628
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $286
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 624
INDIRU4
CVUU1 4
ASGNU1
line 306
;306:				re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 640
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 644
CNSTF4 1325400064
ASGNF4
ADDRLP4 640
INDIRF4
ADDRLP4 644
INDIRF4
LTF4 $288
ADDRLP4 636
ADDRLP4 640
INDIRF4
ADDRLP4 644
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $289
JUMPV
LABELV $288
ADDRLP4 636
ADDRLP4 640
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $289
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 636
INDIRU4
CVUU1 4
ASGNU1
line 307
;307:				re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 309
;308:
;309:				le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
line 310
;310:				le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
line 311
;311:				le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
line 312
;312:				le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 313
;313:			}
line 315
;314:
;315:		}
line 316
;316:		return;
ADDRGP4 $241
JUMPV
LABELV $257
line 319
;317:	}
;318:
;319:	VectorCopy (start, move);
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 320
;320:	VectorSubtract (end, start, vec);
ADDRLP4 552
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 556
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 552
INDIRP4
INDIRF4
ADDRLP4 556
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 560
CNSTI4 4
ASGNI4
ADDRLP4 24+4
ADDRLP4 552
INDIRP4
ADDRLP4 560
INDIRI4
ADDP4
INDIRF4
ADDRLP4 556
INDIRP4
ADDRLP4 560
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 564
CNSTI4 8
ASGNI4
ADDRLP4 24+8
ADDRFP4 8
INDIRP4
ADDRLP4 564
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 564
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 321
;321:	len = VectorNormalize (vec);
ADDRLP4 24
ARGP4
ADDRLP4 568
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 568
INDIRF4
ASGNF4
line 322
;322:	PerpendicularVector(temp, vec);
ADDRLP4 488
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 323
;323:	for (i = 0 ; i < 36; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $292
line 324
;324:		RotatePointAroundVector(axis[i], vec, temp, i * 10);//banshee 2.4 was 10
CNSTI4 12
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 488
ARGP4
CNSTI4 10
ADDRLP4 4
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 325
;325:	}
LABELV $293
line 323
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $292
line 327
;326:
;327:	VectorMA(move, 20, vec, move);
ADDRLP4 572
CNSTF4 1101004800
ASGNF4
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 572
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 572
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 328
;328:	VectorScale (vec, SPACING, vec);
ADDRLP4 576
CNSTF4 1084227584
ASGNF4
ADDRLP4 24
ADDRLP4 576
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 576
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24+8
CNSTF4 1084227584
ADDRLP4 24+8
INDIRF4
MULF4
ASGNF4
line 330
;329:
;330:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 332
;331:
;332:	j = 18;
ADDRLP4 36
CNSTI4 18
ASGNI4
line 333
;333:	for (i = 0; i < len; i += SPACING) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $309
JUMPV
LABELV $306
line 334
;334:		if (i != skip) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $310
line 335
;335:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 336
;336:			le = CG_AllocLocalEntity();
ADDRLP4 580
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 580
INDIRP4
ASGNP4
line 337
;337:			re = &le->refEntity;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 338
;338:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 339
;339:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 340
;340:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 341
;341:			le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 342
;342:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 344
;343:
;344:			re->shaderTime = cg.time / 1000.0f;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 345
;345:			re->reType = RT_SPRITE;
ADDRLP4 20
INDIRP4
CNSTI4 2
ASGNI4
line 346
;346:			re->radius = 1.1f;
ADDRLP4 20
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 347
;347:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+252
INDIRI4
ASGNI4
line 349
;348:
;349:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 592
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 596
CNSTF4 1325400064
ASGNF4
ADDRLP4 592
INDIRF4
ADDRLP4 596
INDIRF4
LTF4 $318
ADDRLP4 588
ADDRLP4 592
INDIRF4
ADDRLP4 596
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $319
JUMPV
LABELV $318
ADDRLP4 588
ADDRLP4 592
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $319
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 588
INDIRU4
CVUU1 4
ASGNU1
line 350
;350:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 604
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 608
CNSTF4 1325400064
ASGNF4
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
LTF4 $321
ADDRLP4 600
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $322
JUMPV
LABELV $321
ADDRLP4 600
ADDRLP4 604
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $322
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 600
INDIRU4
CVUU1 4
ASGNU1
line 351
;351:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 616
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 620
CNSTF4 1325400064
ASGNF4
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
LTF4 $324
ADDRLP4 612
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $325
JUMPV
LABELV $324
ADDRLP4 612
ADDRLP4 616
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $325
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 612
INDIRU4
CVUU1 4
ASGNU1
line 352
;352:			re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 354
;353:
;354:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
line 355
;355:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
line 356
;356:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
line 357
;357:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 359
;358:
;359:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 360
;360:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 362
;361:
;362:			VectorCopy( move, move2);
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 363
;363:			VectorMA(move2, RADIUS , axis[j], move2);
ADDRLP4 624
CNSTF4 1082130432
ASGNF4
ADDRLP4 628
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ASGNI4
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
CNSTF4 1082130432
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 364
;364:			VectorCopy(move2, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 366
;365:
;366:			le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 367
;367:			le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ASGNF4
line 368
;368:			le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ASGNF4
line 369
;369:		}
LABELV $310
line 371
;370:
;371:		VectorAdd (move, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 24+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 24+8
INDIRF4
ADDF4
ASGNF4
line 373
;372:
;373:		j = (j + ROTATION) % 36;
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
line 374
;374:	}
LABELV $307
line 333
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $309
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $306
line 375
;375:}
LABELV $241
endproc CG_RailTrail 648 16
proc CG_OldRocketTrail 92 48
line 383
;376:
;377:/*
;378:==========================
;379:CG_OldRocketTrail	(for the crappy old rocket trail.)
;380:==========================
;381:*/
;382:static void CG_OldRocketTrail( centity_t *ent, const weaponInfo_t *wi )
;383:{
line 393
;384:	int		step;
;385:	vec3_t	origin, lastPos;
;386:	int		t;
;387:	int		startTime, contents;
;388:	int		lastContents;
;389:	entityState_t	*es;
;390:	vec3_t	up;
;391:	localEntity_t	*smoke;
;392:
;393:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $342
line 394
;394:		return;
ADDRGP4 $341
JUMPV
LABELV $342
line 397
;395:	}
;396:
;397:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 398
;398:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 399
;399:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 401
;400:
;401:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 403
;402:
;403:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 404
;404:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 405
;405:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 407
;406:
;407:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 408
;408:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 411
;409:
;410:	// if object (e.g. grenade) is stationary, don't toss up smoke
;411:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $348
line 412
;412:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 413
;413:		return;
ADDRGP4 $341
JUMPV
LABELV $348
line 416
;414:	}
;415:
;416:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 417
;417:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 419
;418:
;419:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 421
;420:
;421:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $359
line 422
;422:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $341
line 423
;423:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 424
;424:		}
line 425
;425:		return;
ADDRGP4 $341
JUMPV
line 428
;426:	}
;427:
;428:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $356
line 429
;429:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 431
;430:
;431:		smoke = CG_SmokePuff( lastPos, up,
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+180268+340
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 440
;432:		                      wi->trailRadius,
;433:		                      1, 1, 1, 0.33f,
;434:		                      wi->wiTrailTime,
;435:		                      t,
;436:		                      0,
;437:		                      0,
;438:		                      cgs.media.smokePuffShader );
;439:		// use the optimized local entity add
;440:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 441
;441:	}
LABELV $357
line 428
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $359
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $356
line 443
;442:
;443:}
LABELV $341
endproc CG_OldRocketTrail 92 48
proc CG_LeiSmokeTrail 84 12
line 452
;444:
;445:/*
;446:==========================
;447:CG_LeiSmokeTrail
;448:==========================
;449:*/
;450:
;451:static void CG_LeiSmokeTrail( centity_t *ent, const weaponInfo_t *wi )
;452:{
line 461
;453:	int		step;
;454:	vec3_t	origin, lastPos;
;455:	int		t;
;456:	int		startTime, contents;
;457:	int		lastContents;
;458:	entityState_t	*es;
;459:	vec3_t	up;
;460:
;461:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $363
line 462
;462:		return;
ADDRGP4 $362
JUMPV
LABELV $363
line 465
;463:	}
;464:
;465:	up[0] = 5 - 10 * crandom();
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
CNSTF4 1084227584
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 466
;466:	up[1] = 5 - 10 * crandom();
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8+4
CNSTF4 1084227584
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 467
;467:	up[2] = 8 - 5 * crandom();
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8+8
CNSTF4 1090519040
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 469
;468:
;469:	step = 18;
ADDRLP4 4
CNSTI4 18
ASGNI4
line 471
;470:
;471:	es = &ent->currentState;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
line 472
;472:	startTime = ent->trailTime;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 473
;473:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 4
INDIRI4
ADDRLP4 52
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
DIVI4
MULI4
ASGNI4
line 475
;474:
;475:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 476
;476:	contents = CG_PointContents( origin, -1 );
ADDRLP4 20
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 76
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 76
INDIRI4
ASGNI4
line 479
;477:
;478:	// if object (e.g. grenade) is stationary, don't toss up smoke
;479:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $369
line 480
;480:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 481
;481:		return;
ADDRGP4 $362
JUMPV
LABELV $369
line 484
;482:	}
;483:
;484:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 485
;485:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 40
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 80
INDIRI4
ASGNI4
line 487
;486:
;487:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 489
;488:
;489:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 36
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $380
line 490
;490:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 36
INDIRI4
ADDRLP4 56
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $362
line 491
;491:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 40
ARGP4
ADDRLP4 20
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 492
;492:		}
line 493
;493:		return;
ADDRGP4 $362
JUMPV
line 496
;494:	}
;495:
;496:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $377
line 498
;497:
;498:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $381
line 499
;499:			trap_R_LFX_ParticleEffect(1, origin, up); // that was easy.
CNSTI4 1
ARGI4
ADDRLP4 20
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 500
;500:		}
LABELV $381
line 501
;501:	}
LABELV $378
line 496
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
LABELV $380
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $377
line 503
;502:
;503:}
LABELV $362
endproc CG_LeiSmokeTrail 84 12
proc CG_LeiPlasmaTrail 80 48
line 507
;504:
;505:
;506:static void CG_LeiPlasmaTrail( centity_t *ent, const weaponInfo_t *wi )
;507:{
line 516
;508:	int		step;
;509:	vec3_t	origin, lastPos;
;510:	int		t;
;511:	int		startTime, contents;
;512:	entityState_t	*es;
;513:	vec3_t	up;
;514:	localEntity_t	*smoke;
;515:
;516:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $385
line 517
;517:		return;
ADDRGP4 $384
JUMPV
LABELV $385
line 520
;518:	}
;519:
;520:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 521
;521:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 522
;522:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 524
;523:
;524:	step = 16;
ADDRLP4 20
CNSTI4 16
ASGNI4
line 526
;525:
;526:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 527
;527:	startTime = ent->trailTime;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 528
;528:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 52
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 530
;529:
;530:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 531
;531:	contents = CG_PointContents( origin, -1 );
ADDRLP4 40
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 534
;532:
;533:	// if object (e.g. grenade) is stationary, don't toss up smoke
;534:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $391
line 535
;535:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 536
;536:		return;
ADDRGP4 $384
JUMPV
LABELV $391
line 539
;537:	}
;538:
;539:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 541
;540:
;541:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 543
;542:
;543:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 56
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $400
line 544
;544:		return;
ADDRGP4 $384
JUMPV
line 547
;545:	}
;546:
;547:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $397
line 548
;548:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 550
;549:
;550:		smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader1 );
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 cgs+180268+364
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 76
INDIRP4
ASGNP4
line 552
;551:		// use the optimized local entity add
;552:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 554
;553:		//smoke->trType = TR_GRAVITY;
;554:	}
LABELV $398
line 547
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $400
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $397
line 556
;555:
;556:}
LABELV $384
endproc CG_LeiPlasmaTrail 80 48
proc CG_NailTrail 92 48
line 566
;557:
;558:
;559://#ifdef MISSIONPACK
;560:/*
;561:==========================
;562:CG_PlasmaTrail
;563:==========================
;564:*/
;565:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi )
;566:{
line 576
;567:	int		step;
;568:	vec3_t	origin, lastPos;
;569:	int		t;
;570:	int		startTime, contents;
;571:	int		lastContents;
;572:	entityState_t	*es;
;573:	vec3_t	up;
;574:	localEntity_t	*smoke;
;575:
;576:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $404
line 577
;577:		return;
ADDRGP4 $403
JUMPV
LABELV $404
line 580
;578:	}
;579:
;580:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 581
;581:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 582
;582:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 584
;583:
;584:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 586
;585:
;586:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 587
;587:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 588
;588:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 590
;589:
;590:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 591
;591:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 594
;592:
;593:	// if object (e.g. grenade) is stationary, don't toss up smoke
;594:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $410
line 595
;595:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 596
;596:		return;
ADDRGP4 $403
JUMPV
LABELV $410
line 599
;597:	}
;598:
;599:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 600
;600:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 602
;601:
;602:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 604
;603:
;604:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $421
line 605
;605:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $403
line 606
;606:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 607
;607:		}
line 608
;608:		return;
ADDRGP4 $403
JUMPV
line 611
;609:	}
;610:
;611:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $418
line 612
;612:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 614
;613:
;614:		smoke = CG_SmokePuff( lastPos, up,
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+180268+444
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 623
;615:		                      wi->trailRadius,
;616:		                      1, 1, 1, 0.33f,
;617:		                      wi->wiTrailTime,
;618:		                      t,
;619:		                      0,
;620:		                      0,
;621:		                      cgs.media.nailPuffShader );
;622:		// use the optimized local entity add
;623:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 624
;624:	}
LABELV $419
line 611
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $421
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $418
line 626
;625:
;626:}
LABELV $403
endproc CG_NailTrail 92 48
proc CG_OldPlasmaTrail 188 12
line 635
;627://#endif
;628:
;629:/*
;630:==========================
;631:CG_NailTrail
;632:==========================
;633:*/
;634:static void CG_OldPlasmaTrail( centity_t *cent, const weaponInfo_t *wi )
;635:{
line 643
;636:	localEntity_t	*le;
;637:	refEntity_t		*re;
;638:	entityState_t	*es;
;639:	vec3_t			velocity, xvelocity, origin;
;640:	vec3_t			offset, xoffset;
;641:	vec3_t			v[3];
;642:
;643:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 645
;644:
;645:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRLP4 112
CNSTI4 0
ASGNI4
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
ADDRLP4 112
INDIRI4
NEI4 $429
ADDRGP4 cg_oldPlasma+12
INDIRI4
ADDRLP4 112
INDIRI4
EQI4 $425
LABELV $429
line 646
;646:		return;
ADDRGP4 $424
JUMPV
LABELV $425
line 648
;647:	}
;648:	es = &cent->currentState;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
line 650
;649:
;650:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 652
;651:
;652:	le = CG_AllocLocalEntity();
ADDRLP4 116
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 116
INDIRP4
ASGNP4
line 653
;653:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 655
;654:
;655:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
CNSTF4 1123024896
CNSTF4 1073741824
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 656
;656:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
CNSTF4 1117782016
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 657
;657:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
CNSTF4 1128792064
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 659
;658:
;659:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 660
;660:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 661
;661:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 662
;662:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 664
;663:
;664:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 665
;665:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 667
;666:
;667:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 668
;668:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 670
;669:
;670:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 672
;671:
;672:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 673
;673:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 674
;674:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 676
;675:
;676:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 677
;677:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 678
;678:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 680
;679:
;680:	VectorAdd( origin, xoffset, re->origin );
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 681
;681:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 683
;682:
;683:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 136
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $461
line 684
;684:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 685
;685:	}
LABELV $461
line 687
;686:
;687:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 688
;688:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 689
;689:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 690
;690:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 692
;691:
;692:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 693
;693:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 694
;694:	re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 695
;695:	re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 696
;696:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+252
INDIRI4
ASGNI4
line 697
;697:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 700
;698:
;699:
;700:	re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 144
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 148
CNSTF4 1325400064
ASGNF4
ADDRLP4 144
INDIRF4
ADDRLP4 148
INDIRF4
LTF4 $489
ADDRLP4 140
ADDRLP4 144
INDIRF4
ADDRLP4 148
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $490
JUMPV
LABELV $489
ADDRLP4 140
ADDRLP4 144
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $490
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 140
INDIRU4
CVUU1 4
ASGNU1
line 701
;701:	re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 156
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 160
CNSTF4 1325400064
ASGNF4
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
LTF4 $492
ADDRLP4 152
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $493
JUMPV
LABELV $492
ADDRLP4 152
ADDRLP4 156
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $493
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 152
INDIRU4
CVUU1 4
ASGNU1
line 702
;702:	re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 168
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 172
CNSTF4 1325400064
ASGNF4
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRF4
LTF4 $495
ADDRLP4 164
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $496
JUMPV
LABELV $495
ADDRLP4 164
ADDRLP4 168
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $496
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 164
INDIRU4
CVUU1 4
ASGNU1
line 703
;703:	re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 705
;704:
;705:	le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 706
;706:	le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
line 707
;707:	le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
line 708
;708:	le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 710
;709:
;710:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 711
;711:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 712
;712:	le->angles.trBase[0] = rand()&31;
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 176
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 713
;713:	le->angles.trBase[1] = rand()&31;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 180
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 714
;714:	le->angles.trBase[2] = rand()&31;
ADDRLP4 184
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 184
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 715
;715:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 716
;716:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 717
;717:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 719
;718:
;719:}
LABELV $424
endproc CG_OldPlasmaTrail 188 12
export CG_GrappleTrail
proc CG_GrappleTrail 220 16
line 726
;720:/*
;721:==========================
;722:CG_GrappleTrail
;723:==========================
;724:*/
;725:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi )
;726:{
line 732
;727:	vec3_t	origin;
;728:	entityState_t	*es;
;729:	vec3_t			forward, up;
;730:	refEntity_t		beam;
;731:
;732:	es = &ent->currentState;
ADDRLP4 200
ADDRFP4 0
INDIRP4
ASGNP4
line 734
;733:
;734:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 200
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 188
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 735
;735:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 737
;736:
;737:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 739
;738:	//FIXME adjust for muzzle position
;739:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
CNSTI4 936
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+776
ADDP4
INDIRB
ASGNB 12
line 740
;740:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 741
;741:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
CNSTI4 936
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+788
ADDP4
ARGP4
ADDRLP4 204
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 742
;742:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
CNSTF4 3233808384
ADDRLP4 176
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 3233808384
ADDRLP4 176+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 3233808384
ADDRLP4 176+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 743
;743:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 188
INDIRB
ASGNB 12
line 745
;744:
;745:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 216
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 216
INDIRF4
CNSTF4 1115684864
GEF4 $519
line 746
;746:		return; // Don't draw if close
ADDRGP4 $498
JUMPV
LABELV $519
line 748
;747:
;748:	beam.reType = RT_RAIL_CORE;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 749
;749:	beam.customShader = cgs.media.grappleShader;
ADDRLP4 0+112
ADDRGP4 cgs+180268+408
INDIRI4
ASGNI4
line 751
;750:
;751:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 752
;752:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 753
;753:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 754
;754:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 755
;755:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 756
;756:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 757
;757:}
LABELV $498
endproc CG_GrappleTrail 220 16
proc CG_RocketTrail 0 8
line 766
;758:
;759:/*
;760:==========================
;761:CG_GrenadeTrail
;762:==========================
;763:*/
;764:// LEILEI enhancment
;765:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi )
;766:{
line 768
;767:
;768:	if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $535
line 769
;769:		CG_LeiSmokeTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_LeiSmokeTrail
CALLV
pop
line 770
;770:	}
ADDRGP4 $536
JUMPV
LABELV $535
line 771
;771:	else {
line 772
;772:		CG_OldRocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_OldRocketTrail
CALLV
pop
line 773
;773:	}
LABELV $536
line 774
;774:}
LABELV $534
endproc CG_RocketTrail 0 8
proc CG_PlasmaTrail 0 8
line 777
;775:
;776:static void CG_PlasmaTrail( centity_t *ent, const weaponInfo_t *wi )
;777:{
line 779
;778:
;779:	if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $539
line 780
;780:		CG_LeiPlasmaTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_LeiPlasmaTrail
CALLV
pop
line 781
;781:	}
ADDRGP4 $540
JUMPV
LABELV $539
line 782
;782:	else {
line 783
;783:		CG_OldPlasmaTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_OldPlasmaTrail
CALLV
pop
line 784
;784:	}
LABELV $540
line 785
;785:}
LABELV $538
endproc CG_PlasmaTrail 0 8
proc CG_GrenadeTrail 0 8
line 789
;786:
;787:
;788:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi )
;789:{
line 790
;790:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 791
;791:}
LABELV $542
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 408 12
line 806
;792:
;793:
;794:
;795:
;796:
;797:
;798:/*
;799:=================
;800:CG_RegisterWeapon
;801:
;802:The server says this item is used on this level
;803:=================
;804:*/
;805:void CG_RegisterWeapon( int weaponNum )
;806:{
line 813
;807:	weaponInfo_t	*weaponInfo;
;808:	gitem_t			*item, *ammo;
;809:	char			path[MAX_QPATH];
;810:	vec3_t			mins, maxs;
;811:	int				i;
;812:
;813:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 72
CNSTI4 172
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 815
;814:
;815:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $544
line 816
;816:		return;
ADDRGP4 $543
JUMPV
LABELV $544
line 819
;817:	}
;818:
;819:	if ( weaponInfo->registered ) {
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $546
line 820
;820:		return;
ADDRGP4 $543
JUMPV
LABELV $546
line 823
;821:	}
;822:
;823:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 72
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 172
ARGI4
ADDRGP4 memset
CALLP4
pop
line 824
;824:	weaponInfo->registered = qtrue;
ADDRLP4 72
INDIRP4
CNSTI4 1
ASGNI4
line 826
;825:
;826:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 64
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $551
JUMPV
LABELV $548
line 827
;827:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 64
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $553
ADDRLP4 64
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $553
line 828
;828:			weaponInfo->item = item;
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 64
INDIRP4
ASGNP4
line 829
;829:			break;
ADDRGP4 $550
JUMPV
LABELV $553
line 831
;830:		}
;831:	}
LABELV $549
line 826
ADDRLP4 64
ADDRLP4 64
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $551
ADDRLP4 64
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $548
LABELV $550
line 832
;832:	if ( !item->classname ) {
ADDRLP4 64
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $555
line 833
;833:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $557
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 834
;834:	}
LABELV $555
line 835
;835:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 64
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 838
;836:
;837:	// load cmodel before model so filecache works
;838:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 841
;839:
;840:	// calc midpoint for rotation
;841:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 842
;842:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 68
CNSTI4 0
ASGNI4
LABELV $558
line 843
;843:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 108
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 112
ADDRLP4 108
INDIRI4
ADDRLP4 80
ADDP4
INDIRF4
ASGNF4
ADDRLP4 108
INDIRI4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 112
INDIRF4
CNSTF4 1056964608
ADDRLP4 108
INDIRI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 844
;844:	}
LABELV $559
line 842
ADDRLP4 68
ADDRLP4 68
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 3
LTI4 $558
line 846
;845:
;846:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 847
;847:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 849
;848:
;849:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 76
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $565
JUMPV
LABELV $562
line 850
;850:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 76
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $567
ADDRLP4 76
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $567
line 851
;851:			break;
ADDRGP4 $564
JUMPV
LABELV $567
line 853
;852:		}
;853:	}
LABELV $563
line 849
ADDRLP4 76
ADDRLP4 76
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $565
ADDRLP4 76
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $562
LABELV $564
line 854
;854:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 120
CNSTU4 0
ASGNU4
ADDRLP4 76
INDIRP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $569
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $569
line 855
;855:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 856
;856:	}
LABELV $569
line 858
;857:
;858:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 859
;859:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 860
;860:	Q_strcat( path, sizeof(path), "_flash.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $571
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 861
;861:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 863
;862:
;863:	if ( !weaponInfo->flashModel ) {
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
NEI4 $572
line 864
;864:		weaponInfo->flashModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_flash.md3" );	// default flash
ADDRGP4 $574
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 865
;865:	}
LABELV $572
line 869
;866:
;867:	// leilei - additional flash styles
;868:
;869:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 870
;870:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 871
;871:	Q_strcat( path, sizeof(path), "_flash1.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $575
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 872
;872:	weaponInfo->flashModel_type1 = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 874
;873:
;874:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 875
;875:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 876
;876:	Q_strcat( path, sizeof(path), "_flash2.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $576
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 877
;877:	weaponInfo->flashModel_type2 = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 879
;878:
;879:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 880
;880:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 881
;881:	Q_strcat( path, sizeof(path), "_flash2a.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $577
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 882
;882:	weaponInfo->flashModel_type2a = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 136
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 884
;883:
;884:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 885
;885:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 886
;886:	Q_strcat( path, sizeof(path), "_flash3.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $578
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 887
;887:	weaponInfo->flashModel_type3 = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 140
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 889
;888:
;889:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 890
;890:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 891
;891:	Q_strcat( path, sizeof(path), "_flash4.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 892
;892:	weaponInfo->flashModel_type4 = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 144
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 894
;893:
;894:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 895
;895:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 896
;896:	Q_strcat( path, sizeof(path), "_flash5.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $580
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 897
;897:	weaponInfo->flashModel_type5 = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 148
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 900
;898:
;899:
;900:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 901
;901:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 902
;902:	Q_strcat( path, sizeof(path), "_flash5a.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $581
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 903
;903:	weaponInfo->flashModel_type5a = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 152
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 912
;904:
;905:
;906:
;907:
;908:
;909:
;910:	// leilei - revert to default flash model if we really don't have a real one.
;911:
;912:	if (!weaponInfo->flashModel_type1) weaponInfo->flashModel_type1 = trap_R_RegisterModel( "models/muzzle/flash1.md3" );
ADDRLP4 72
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 0
NEI4 $582
ADDRGP4 $584
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
LABELV $582
line 913
;913:	if (!weaponInfo->flashModel_type2) weaponInfo->flashModel_type2 = trap_R_RegisterModel( "models/muzzle/flash2.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $585
ADDRGP4 $587
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 160
INDIRI4
ASGNI4
LABELV $585
line 914
;914:	if (!weaponInfo->flashModel_type2a) weaponInfo->flashModel_type2a = trap_R_RegisterModel( "models/muzzle/flash2a.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 0
NEI4 $588
ADDRGP4 $590
ARGP4
ADDRLP4 164
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
LABELV $588
line 915
;915:	if (!weaponInfo->flashModel_type3) weaponInfo->flashModel_type3 = trap_R_RegisterModel( "models/muzzle/flash3.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 156
ADDP4
INDIRI4
CNSTI4 0
NEI4 $591
ADDRGP4 $593
ARGP4
ADDRLP4 168
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
LABELV $591
line 916
;916:	if (!weaponInfo->flashModel_type4) weaponInfo->flashModel_type4 = trap_R_RegisterModel( "models/muzzle/flash4.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 0
NEI4 $594
ADDRGP4 $596
ARGP4
ADDRLP4 172
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
LABELV $594
line 917
;917:	if (!weaponInfo->flashModel_type5) weaponInfo->flashModel_type5 = trap_R_RegisterModel( "models/muzzle/flash5.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 0
NEI4 $597
ADDRGP4 $599
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
LABELV $597
line 918
;918:	if (!weaponInfo->flashModel_type5a) weaponInfo->flashModel_type5a = trap_R_RegisterModel( "models/muzzle/flash5a.md3" ); 
ADDRLP4 72
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 0
NEI4 $600
ADDRGP4 $602
ARGP4
ADDRLP4 180
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
LABELV $600
line 920
;919:
;920:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 921
;921:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 922
;922:	Q_strcat( path, sizeof(path), "_barrel.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $603
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 923
;923:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 184
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 925
;924:
;925:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 0
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 926
;926:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 0
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 927
;927:	Q_strcat( path, sizeof(path), "_hand.md3" );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $604
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 928
;928:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 0
ARGP4
ADDRLP4 188
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 930
;929:
;930:	if ( !weaponInfo->handsModel ) {
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $605
line 931
;931:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $607
ARGP4
ADDRLP4 192
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 932
;932:	}
LABELV $605
line 934
;933:
;934:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 72
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 936
;935:
;936:	switch ( weaponNum ) {
ADDRLP4 192
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 1
LTI4 $608
ADDRLP4 192
INDIRI4
CNSTI4 13
GTI4 $608
ADDRLP4 192
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $705-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $705
address $610
address $648
address $655
address $670
address $657
address $613
address $687
address $678
address $698
address $632
address $675
address $664
address $639
code
LABELV $610
line 938
;937:	case WP_GAUNTLET:
;938:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 939
;939:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $611
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 940
;940:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $612
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 941
;941:		weaponInfo->lfx = 0; //  no effect
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 0
ASGNI4
line 942
;942:		break;
ADDRGP4 $609
JUMPV
LABELV $613
line 945
;943:
;944:	case WP_LIGHTNING:
;945:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 946
;946:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $614
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 947
;947:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $615
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 949
;948:
;949:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $616
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 950
;950:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $619
ARGP4
ADDRLP4 216
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+260
ADDRLP4 216
INDIRI4
ASGNI4
line 951
;951:		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
ADDRGP4 $622
ARGP4
ADDRLP4 220
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+180268+608
ADDRLP4 220
INDIRI4
ASGNI4
line 952
;952:		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $625
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+180268+936
ADDRLP4 224
INDIRI4
ASGNI4
line 953
;953:		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $628
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+180268+940
ADDRLP4 228
INDIRI4
ASGNI4
line 954
;954:		cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $631
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+180268+944
ADDRLP4 232
INDIRI4
ASGNI4
line 955
;955:		weaponInfo->lfx = 0; //  no effect
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 0
ASGNI4
line 956
;956:		break;
ADDRGP4 $609
JUMPV
LABELV $632
line 959
;957:
;958:	case WP_GRAPPLING_HOOK:
;959:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 960
;960:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/hook/hook.md3" );
ADDRGP4 $633
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 961
;961:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 962
;962:		weaponInfo->missileDlight = 0;
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 0
ASGNF4
line 963
;963:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 964
;964:		weaponInfo->trailRadius = 64;
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 965
;965:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 966
;966:		cgs.media.grappleShader = trap_R_RegisterShader( "grappleRope");
ADDRGP4 $636
ARGP4
ADDRLP4 240
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+408
ADDRLP4 240
INDIRI4
ASGNI4
line 967
;967:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grapple/grapfire.wav", qfalse );
ADDRGP4 $637
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 968
;968:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/grapple/grappull.wav", qfalse );
ADDRGP4 $638
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 248
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 248
INDIRI4
ASGNI4
line 970
;969:		//cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
;970:		weaponInfo->lfx = 0; //  no effect
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 0
ASGNI4
line 971
;971:		break;
ADDRGP4 $609
JUMPV
LABELV $639
line 975
;972:
;973://#ifdef MISSIONPACK
;974:	case WP_CHAINGUN:
;975:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
ADDRGP4 $640
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 252
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 976
;976:		weaponInfo->loopFireSound = qtrue;
ADDRLP4 72
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 1
ASGNI4
line 977
;977:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 979
;978:		// leilei -testing a looping firing sound instead of lots of flash sounds for performance reasons
;979:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
ADDRGP4 $641
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 980
;980:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
ADDRGP4 $642
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 260
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 981
;981:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
ADDRGP4 $643
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 264
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 982
;982:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
ADDRGP4 $644
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 983
;983:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 72
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 984
;984:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $647
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+620
ADDRLP4 272
INDIRI4
ASGNI4
line 985
;985:		weaponInfo->lfx = 71;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 71
ASGNI4
line 986
;986:		break;
ADDRGP4 $609
JUMPV
LABELV $648
line 990
;987://#endif
;988:
;989:	case WP_MACHINEGUN:
;990:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 991
;991:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $649
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 276
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 992
;992:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $650
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 993
;993:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $651
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 284
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 994
;994:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $652
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 995
;995:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 72
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 996
;996:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $647
ARGP4
ADDRLP4 292
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+620
ADDRLP4 292
INDIRI4
ASGNI4
line 997
;997:		weaponInfo->lfx = 62;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 62
ASGNI4
line 998
;998:		break;
ADDRGP4 $609
JUMPV
LABELV $655
line 1001
;999:
;1000:	case WP_SHOTGUN:
;1001:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1002
;1002:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $656
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 296
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 296
INDIRI4
ASGNI4
line 1003
;1003:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 72
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 1004
;1004:		weaponInfo->lfx = 63;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 63
ASGNI4
line 1005
;1005:		break;
ADDRGP4 $609
JUMPV
LABELV $657
line 1008
;1006:
;1007:	case WP_ROCKET_LAUNCHER:
;1008:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $658
ARGP4
ADDRLP4 300
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 1009
;1009:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $659
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 1010
;1010:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 1011
;1011:		weaponInfo->missileDlight = 200;
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 1012
;1012:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 1013
;1013:		weaponInfo->trailRadius = 64;
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 1015
;1014:
;1015:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 1016
;1016:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1018
;1017:
;1018:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $660
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 308
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 308
INDIRI4
ASGNI4
line 1019
;1019:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $663
ARGP4
ADDRLP4 312
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+624
ADDRLP4 312
INDIRI4
ASGNI4
line 1020
;1020:		weaponInfo->lfx = 65;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 65
ASGNI4
line 1021
;1021:		break;
ADDRGP4 $609
JUMPV
LABELV $664
line 1025
;1022:
;1023://#ifdef MISSIONPACK
;1024:	case WP_PROX_LAUNCHER:
;1025:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
ADDRGP4 $665
ARGP4
ADDRLP4 316
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 316
INDIRI4
ASGNI4
line 1026
;1026:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 1027
;1027:		weaponInfo->wiTrailTime = 700;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 1028
;1028:		weaponInfo->trailRadius = 32;
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 1029
;1029:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1030
;1030:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
ADDRGP4 $666
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 320
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 320
INDIRI4
ASGNI4
line 1031
;1031:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $669
ARGP4
ADDRLP4 324
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+628
ADDRLP4 324
INDIRI4
ASGNI4
line 1032
;1032:		weaponInfo->lfx = 70;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 70
ASGNI4
line 1033
;1033:		break;
ADDRGP4 $609
JUMPV
LABELV $670
line 1037
;1034://#endif
;1035:
;1036:	case WP_GRENADE_LAUNCHER:
;1037:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $671
ARGP4
ADDRLP4 328
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 328
INDIRI4
ASGNI4
line 1038
;1038:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 1039
;1039:		weaponInfo->wiTrailTime = 700;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 1040
;1040:		weaponInfo->trailRadius = 32;
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 1041
;1041:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1042
;1042:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $672
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 332
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 332
INDIRI4
ASGNI4
line 1043
;1043:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $669
ARGP4
ADDRLP4 336
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+628
ADDRLP4 336
INDIRI4
ASGNI4
line 1044
;1044:		weaponInfo->lfx = 64;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 64
ASGNI4
line 1045
;1045:		break;
ADDRGP4 $609
JUMPV
LABELV $675
line 1049
;1046:
;1047://#ifdef MISSIONPACK
;1048:	case WP_NAILGUN:
;1049:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
ADDRLP4 72
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_NailgunEjectBrass
ASGNP4
line 1050
;1050:		weaponInfo->missileTrailFunc = CG_NailTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_NailTrail
ASGNP4
line 1052
;1051://		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;1052:		weaponInfo->trailRadius = 16;
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1098907648
ASGNF4
line 1053
;1053:		weaponInfo->wiTrailTime = 250;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1132068864
ASGNF4
line 1054
;1054:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
ADDRGP4 $676
ARGP4
ADDRLP4 340
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 340
INDIRI4
ASGNI4
line 1055
;1055:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1056
;1056:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
ADDRGP4 $677
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 344
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 344
INDIRI4
ASGNI4
line 1057
;1057:		weaponInfo->lfx = 69;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 69
ASGNI4
line 1058
;1058:		break;
ADDRGP4 $609
JUMPV
LABELV $678
line 1063
;1059://#endif
;1060:
;1061:	case WP_PLASMAGUN:
;1062://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1063:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 1064
;1064:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $679
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 348
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 348
INDIRI4
ASGNI4
line 1065
;1065:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1066
;1066:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $680
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 352
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 352
INDIRI4
ASGNI4
line 1067
;1067:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $683
ARGP4
ADDRLP4 356
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+616
ADDRLP4 356
INDIRI4
ASGNI4
line 1068
;1068:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $686
ARGP4
ADDRLP4 360
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+252
ADDRLP4 360
INDIRI4
ASGNI4
line 1069
;1069:		weaponInfo->lfx = 66;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 66
ASGNI4
line 1070
;1070:		break;
ADDRGP4 $609
JUMPV
LABELV $687
line 1073
;1071:
;1072:	case WP_RAILGUN:
;1073:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $688
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 364
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 364
INDIRI4
ASGNI4
line 1074
;1074:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1075
;1075:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $689
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 368
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 368
INDIRI4
ASGNI4
line 1076
;1076:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $692
ARGP4
ADDRLP4 372
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+612
ADDRLP4 372
INDIRI4
ASGNI4
line 1077
;1077:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $686
ARGP4
ADDRLP4 376
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+252
ADDRLP4 376
INDIRI4
ASGNI4
line 1078
;1078:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $697
ARGP4
ADDRLP4 380
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+256
ADDRLP4 380
INDIRI4
ASGNI4
line 1079
;1079:		weaponInfo->lfx = 67;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 67
ASGNI4
line 1080
;1080:		break;
ADDRGP4 $609
JUMPV
LABELV $698
line 1083
;1081:
;1082:	case WP_BFG:
;1083:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $699
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 384
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 384
INDIRI4
ASGNI4
line 1084
;1084:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.7f, 1 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1085
;1085:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $700
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 388
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 388
INDIRI4
ASGNI4
line 1086
;1086:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $703
ARGP4
ADDRLP4 392
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+180268+632
ADDRLP4 392
INDIRI4
ASGNI4
line 1087
;1087:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
ADDRGP4 $704
ARGP4
ADDRLP4 396
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 396
INDIRI4
ASGNI4
line 1088
;1088:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $659
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 400
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 400
INDIRI4
ASGNI4
line 1089
;1089:		weaponInfo->lfx = 68;
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 68
ASGNI4
line 1090
;1090:		break;
ADDRGP4 $609
JUMPV
LABELV $608
line 1093
;1091:
;1092:	default:
;1093:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1094
;1094:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $660
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 404
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 404
INDIRI4
ASGNI4
line 1095
;1095:		break;
LABELV $609
line 1097
;1096:	}
;1097:}
LABELV $543
endproc CG_RegisterWeapon 408 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 1107
;1098:
;1099:/*
;1100:=================
;1101:CG_RegisterItemVisuals
;1102:
;1103:The server says this item is used on this level
;1104:=================
;1105:*/
;1106:void CG_RegisterItemVisuals( int itemNum )
;1107:{
line 1111
;1108:	itemInfo_t		*itemInfo;
;1109:	gitem_t			*item;
;1110:
;1111:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $710
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $708
LABELV $710
line 1112
;1112:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $711
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1113
;1113:	}
LABELV $708
line 1115
;1114:
;1115:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 4
CNSTI4 24
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 1116
;1116:	if ( itemInfo->registered ) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $712
line 1117
;1117:		return;
ADDRGP4 $707
JUMPV
LABELV $712
line 1120
;1118:	}
;1119:
;1120:	item = &bg_itemlist[ itemNum ];
ADDRLP4 0
CNSTI4 52
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 1122
;1121:
;1122:	memset( itemInfo, 0, sizeof( itemInfo ) );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1123
;1123:	itemInfo->registered = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 1125
;1124:
;1125:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1127
;1126:
;1127:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1129
;1128:
;1129:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $714
line 1130
;1130:		CG_RegisterWeapon( item->giTag );
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1131
;1131:	}
LABELV $714
line 1136
;1132:
;1133:	//
;1134:	// powerups have an accompanying ring or sphere
;1135:	//
;1136:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH ||
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 5
EQI4 $720
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $720
ADDRLP4 20
INDIRI4
CNSTI4 3
EQI4 $720
ADDRLP4 20
INDIRI4
CNSTI4 6
NEI4 $716
LABELV $720
line 1137
;1137:	        item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 1138
;1138:		if ( item->world_model[1] ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $721
line 1139
;1139:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1140
;1140:		}
LABELV $721
line 1141
;1141:	}
LABELV $716
line 1142
;1142:}
LABELV $707
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 1160
;1143:
;1144:
;1145:/*
;1146:========================================================================================
;1147:
;1148:VIEW WEAPON
;1149:
;1150:========================================================================================
;1151:*/
;1152:
;1153:/*
;1154:=================
;1155:CG_MapTorsoToWeaponFrame
;1156:
;1157:=================
;1158:*/
;1159:static int CG_MapTorsoToWeaponFrame( clientInfo_t *ci, int frame )
;1160:{
line 1163
;1161:
;1162:	// change weapon
;1163:	if ( frame >= ci->animations[TORSO_DROP].firstFrame
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $724
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $724
line 1164
;1164:	        && frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 1165
;1165:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $723
JUMPV
LABELV $724
line 1169
;1166:	}
;1167:
;1168:	// stand attack
;1169:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $726
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 6
ADDI4
GEI4 $726
line 1170
;1170:	        && frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 1171
;1171:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $723
JUMPV
LABELV $726
line 1175
;1172:	}
;1173:
;1174:	// stand attack 2
;1175:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $728
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 6
ADDI4
GEI4 $728
line 1176
;1176:	        && frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 1177
;1177:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $723
JUMPV
LABELV $728
line 1180
;1178:	}
;1179:
;1180:	return 0;
CNSTI4 0
RETI4
LABELV $723
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 108 16
line 1190
;1181:}
;1182:
;1183:
;1184:/*
;1185:==============
;1186:CG_CalculateWeaponPosition
;1187:==============
;1188:*/
;1189:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles )
;1190:{
line 1195
;1191:	float	scale;
;1192:	int		delta;
;1193:	float	fracsin;
;1194:
;1195:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109252+24
INDIRB
ASGNB 12
line 1196
;1196:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+109620
INDIRB
ASGNB 12
line 1199
;1197:
;1198:	// on odd legs, invert some angles
;1199:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+125364
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $734
line 1200
;1200:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125372
INDIRF4
NEGF4
ASGNF4
line 1201
;1201:	}
ADDRGP4 $735
JUMPV
LABELV $734
line 1202
;1202:	else {
line 1203
;1203:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125372
INDIRF4
ASGNF4
line 1204
;1204:	}
LABELV $735
line 1211
;1205:
;1206:	// gun angles from bobbing
;1207:
;1208:
;1209:
;1210:	// Engoo bobbing port
;1211:	if (cg_bobmodel.integer) {
ADDRGP4 cg_bobmodel+12
INDIRI4
CNSTI4 0
EQI4 $739
line 1217
;1212:		vec3_t		forward, right, up;
;1213:		float		bob;
;1214:		//float		sinsin;
;1215:
;1216:		//sinsin = fabs( sin( ( ps->bobCycle & 127 ) / 127.0 * M_PI ) );
;1217:		AngleVectors (angles, forward, right, up);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1221
;1218:
;1219:
;1220:		// Arc 1
;1221:		if (cg_bobmodel.integer == 1) {
ADDRGP4 cg_bobmodel+12
INDIRI4
CNSTI4 1
NEI4 $742
line 1222
;1222:			bob = scale * 2 * 0.05 * cg.bobfracsin * 0.04;
ADDRLP4 12
CNSTF4 1025758986
CNSTF4 1028443341
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
MULF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ASGNF4
line 1223
;1223:			VectorMA (origin, bob, right, origin);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1225
;1224:
;1225:			bob = cos(scale * 0.07 * cg.bobfracsin * 0.05) - cos(scale * 0.07 * cg.bobfracsin * 0.1);
CNSTF4 1028443341
CNSTF4 1032805417
ADDRLP4 0
INDIRF4
MULF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 64
ADDRGP4 cos
CALLF4
ASGNF4
CNSTF4 1036831949
CNSTF4 1032805417
ADDRLP4 0
INDIRF4
MULF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 68
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 64
INDIRF4
ADDRLP4 68
INDIRF4
SUBF4
ASGNF4
line 1226
;1226:			VectorMA (origin, bob, up, origin);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1227
;1227:		}
LABELV $742
line 1230
;1228:
;1229:		// Thrust
;1230:		if (cg_bobmodel.integer == 2) {
ADDRGP4 cg_bobmodel+12
INDIRI4
CNSTI4 2
NEI4 $752
line 1232
;1231:
;1232:			bob = scale * 2 * 0.05 * cg.bobfracsin * 0.04;
ADDRLP4 12
CNSTF4 1025758986
CNSTF4 1028443341
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
MULF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ASGNF4
line 1233
;1233:			VectorMA (origin, bob, forward, origin);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 40
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1236
;1234:
;1235:
;1236:		}
LABELV $752
line 1240
;1237:
;1238:
;1239:		// figure 8
;1240:		if (cg_bobmodel.integer == 3) {
ADDRGP4 cg_bobmodel+12
INDIRI4
CNSTI4 3
NEI4 $740
line 1241
;1241:			float thebob = (  cg.bobcycle2 ) * (1.0f / 41.0f);
ADDRLP4 56
CNSTF4 1019727372
ADDRGP4 cg+125368
INDIRF4
MULF4
ASGNF4
line 1242
;1242:			float scale2 =  0.001f * scale;
ADDRLP4 52
CNSTF4 981668463
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1243
;1243:			if (scale2 < 0) scale2 *= -1;
ADDRLP4 52
INDIRF4
CNSTF4 0
GEF4 $762
ADDRLP4 52
CNSTF4 3212836864
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
LABELV $762
line 1245
;1244:
;1245:			VectorMA (origin, (sin(thebob) * 1.5) * scale2, right, origin);
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 60
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
CNSTF4 1069547520
ADDRLP4 60
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 68
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
CNSTF4 1069547520
ADDRLP4 68
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 76
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
CNSTF4 1069547520
ADDRLP4 76
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1246
;1246:			VectorMA (origin, (sin(thebob * 2) * 0.5) * scale2, up, origin);
CNSTF4 1073741824
ADDRLP4 56
INDIRF4
MULF4
ARGF4
ADDRLP4 84
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1056964608
ADDRLP4 84
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
CNSTF4 1073741824
ADDRLP4 56
INDIRF4
MULF4
ARGF4
ADDRLP4 92
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1056964608
ADDRLP4 92
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
CNSTF4 1073741824
ADDRLP4 56
INDIRF4
MULF4
ARGF4
ADDRLP4 100
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1056964608
ADDRLP4 100
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1247
;1247:		}
line 1249
;1248:
;1249:	}
ADDRGP4 $740
JUMPV
LABELV $739
line 1250
;1250:	else {
line 1251
;1251:		angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1252
;1252:		angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1253
;1253:		angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+125372
INDIRF4
ADDRGP4 cg+125360
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1254
;1254:	}
LABELV $740
line 1258
;1255:
;1256:	// leilei - fudgeweapon ported directly from quake :D
;1257:
;1258:	if (cg_viewnudge.integer) {
ADDRGP4 cg_viewnudge+12
INDIRI4
CNSTI4 0
EQI4 $772
line 1260
;1259:
;1260:		if (cg_viewsize.integer== 110)
ADDRGP4 cg_viewsize+12
INDIRI4
CNSTI4 110
NEI4 $775
line 1261
;1261:			origin[2] += 1;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
ADDRGP4 $776
JUMPV
LABELV $775
line 1262
;1262:		else if (cg_viewsize.integer == 100)
ADDRGP4 cg_viewsize+12
INDIRI4
CNSTI4 100
NEI4 $778
line 1263
;1263:			origin[2] += 2;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDF4
ASGNF4
ADDRGP4 $779
JUMPV
LABELV $778
line 1264
;1264:		else if (cg_viewsize.integer == 90)
ADDRGP4 cg_viewsize+12
INDIRI4
CNSTI4 90
NEI4 $781
line 1265
;1265:			origin[2] += 1;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
ADDRGP4 $782
JUMPV
LABELV $781
line 1266
;1266:		else if (cg_viewsize.integer == 80)
ADDRGP4 cg_viewsize+12
INDIRI4
CNSTI4 80
NEI4 $784
line 1267
;1267:			origin[2] += 0.5;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDF4
ASGNF4
LABELV $784
LABELV $782
LABELV $779
LABELV $776
line 1269
;1268:
;1269:	}
LABELV $772
line 1273
;1270:
;1271:
;1272:	// drop the weapon when landing
;1273:	delta = cg.time - cg.landTime;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+109148
INDIRI4
SUBI4
ASGNI4
line 1274
;1274:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 4
INDIRI4
CNSTI4 150
GEI4 $789
line 1275
;1275:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+109144
INDIRF4
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CNSTF4 1125515264
DIVF4
ADDF4
ASGNF4
line 1276
;1276:	}
ADDRGP4 $790
JUMPV
LABELV $789
line 1277
;1277:	else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRLP4 4
INDIRI4
CNSTI4 450
GEI4 $792
line 1278
;1278:		origin[2] += cg.landChange*0.25 *
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+109144
INDIRF4
MULF4
CNSTI4 450
ADDRLP4 4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1133903872
DIVF4
ADDF4
ASGNF4
line 1280
;1279:		             (LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1280:	}
LABELV $792
LABELV $790
line 1294
;1281:
;1282:#if 0			// leilei - this may be dead pre-q3 1.01 code
;1283:	// drop the weapon when stair climbing
;1284:	delta = cg.time - cg.stepTime;
;1285:	if ( delta < STEP_TIME/2 ) {
;1286:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;1287:	}
;1288:	else if ( delta < STEP_TIME ) {
;1289:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;1290:	}
;1291:#endif
;1292:
;1293:	// idle drift
;1294:	if (!cg_bobmodel.integer) {
ADDRGP4 cg_bobmodel+12
INDIRI4
CNSTI4 0
NEI4 $795
line 1295
;1295:		scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+125372
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1296
;1296:		fracsin = sin( cg.time * 0.001 );
CNSTF4 981668463
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 12
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 12
INDIRF4
ASGNF4
line 1297
;1297:		angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1298
;1298:		angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1299
;1299:		angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1300
;1300:	}
LABELV $795
line 1306
;1301:
;1302:
;1303:
;1304:
;1305:
;1306:}
LABELV $730
endproc CG_CalculateWeaponPosition 108 16
proc CG_LightningBolt 320 28
line 1321
;1307:
;1308:
;1309:/*
;1310:===============
;1311:CG_LightningBolt
;1312:
;1313:Origin will be the exact tag point, which is slightly
;1314:different than the muzzle point used for determining hits.
;1315:The cent should be the non-predicted cent if it is from the player,
;1316:so the endpoint will reflect the simulated strike (lagging the predicted
;1317:angle)
;1318:===============
;1319:*/
;1320:static void CG_LightningBolt( centity_t *cent, vec3_t origin )
;1321:{
line 1327
;1322:	trace_t  trace;
;1323:	refEntity_t  beam;
;1324:	vec3_t   forward;
;1325:	vec3_t   muzzlePoint, endPoint;
;1326:
;1327:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $801
line 1328
;1328:		return;
ADDRGP4 $800
JUMPV
LABELV $801
line 1331
;1329:	}
;1330:
;1331:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1335
;1332:
;1333://unlagged - attack prediction #1
;1334:	// if the entity is us, unlagged is on server-side, and we've got it on for the lightning gun
;1335:	if ( (cent->currentState.number == cg.predictedPlayerState.clientNum) && cgs.delagHitscan &&
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $803
ADDRLP4 268
CNSTI4 0
ASGNI4
ADDRGP4 cgs+181708
INDIRI4
ADDRLP4 268
INDIRI4
EQI4 $803
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 268
INDIRI4
NEI4 $810
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 268
INDIRI4
EQI4 $803
LABELV $810
line 1336
;1336:	        ( cg_delag.integer & 1 || cg_delag.integer & 8 ) ) {
line 1338
;1337:		// always shoot straight forward from our current position
;1338:		AngleVectors( cg.predictedPlayerState.viewangles, forward, NULL, NULL );
ADDRGP4 cg+107636+152
ARGP4
ADDRLP4 188
ARGP4
ADDRLP4 272
CNSTP4 0
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1339
;1339:		VectorCopy( cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 176
ADDRGP4 cg+107636+20
INDIRB
ASGNB 12
line 1340
;1340:	}
ADDRGP4 $804
JUMPV
LABELV $803
line 1345
;1341:	else
;1342://unlagged - attack prediction #1
;1343:
;1344:		// CPMA  "true" lightning
;1345:		if ((cent->currentState.number == cg.predictedPlayerState.clientNum) && (cg_trueLightning.value != 0)) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $815
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $815
line 1352
;1346:			vec3_t angle;
;1347:			int i;
;1348:
;1349://unlagged - true lightning
;1350:			// might as well fix up true lightning while we're at it
;1351:			vec3_t viewangles;
;1352:			VectorCopy( cg.predictedPlayerState.viewangles, viewangles );
ADDRLP4 288
ADDRGP4 cg+107636+152
INDIRB
ASGNB 12
line 1355
;1353://unlagged - true lightning
;1354:
;1355:			for (i = 0; i < 3; i++) {
ADDRLP4 272
CNSTI4 0
ASGNI4
LABELV $822
line 1356
;1356:				float a = cent->lerpAngles[i] - viewangles[i]; //unlagged: was cg.refdefViewAngles[i];
ADDRLP4 304
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 300
ADDRLP4 304
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ADDP4
INDIRF4
ADDRLP4 304
INDIRI4
ADDRLP4 288
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1357
;1357:				if (a > 180) {
ADDRLP4 300
INDIRF4
CNSTF4 1127481344
LEF4 $826
line 1358
;1358:					a -= 360;
ADDRLP4 300
ADDRLP4 300
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1359
;1359:				}
LABELV $826
line 1360
;1360:				if (a < -180) {
ADDRLP4 300
INDIRF4
CNSTF4 3274964992
GEF4 $828
line 1361
;1361:					a += 360;
ADDRLP4 300
ADDRLP4 300
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1362
;1362:				}
LABELV $828
line 1364
;1363:
;1364:				angle[i] = viewangles[i] /*unlagged: was cg.refdefViewAngles[i]*/ + a * (1.0 - cg_trueLightning.value);
ADDRLP4 308
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 308
INDIRI4
ADDRLP4 276
ADDP4
ADDRLP4 308
INDIRI4
ADDRLP4 288
ADDP4
INDIRF4
ADDRLP4 300
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1365
;1365:				if (angle[i] < 0) {
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 276
ADDP4
INDIRF4
CNSTF4 0
GEF4 $831
line 1366
;1366:					angle[i] += 360;
ADDRLP4 312
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 276
ADDP4
ASGNP4
ADDRLP4 312
INDIRP4
ADDRLP4 312
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1367
;1367:				}
LABELV $831
line 1368
;1368:				if (angle[i] > 360) {
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 276
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $833
line 1369
;1369:					angle[i] -= 360;
ADDRLP4 312
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 276
ADDP4
ASGNP4
ADDRLP4 312
INDIRP4
ADDRLP4 312
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1370
;1370:				}
LABELV $833
line 1371
;1371:			}
LABELV $823
line 1355
ADDRLP4 272
ADDRLP4 272
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 3
LTI4 $822
line 1373
;1372:
;1373:			AngleVectors(angle, forward, NULL, NULL );
ADDRLP4 276
ARGP4
ADDRLP4 188
ARGP4
ADDRLP4 300
CNSTP4 0
ASGNP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1378
;1374://unlagged - true lightning
;1375://		VectorCopy(cent->lerpOrigin, muzzlePoint );
;1376://		VectorCopy(cg.refdef.vieworg, muzzlePoint );
;1377:			// *this* is the correct origin for true lightning
;1378:			VectorCopy(cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 176
ADDRGP4 cg+107636+20
INDIRB
ASGNB 12
line 1380
;1379://unlagged - true lightning
;1380:		}
ADDRGP4 $816
JUMPV
LABELV $815
line 1381
;1381:		else {
line 1383
;1382:			// !CPMA
;1383:			AngleVectors( cent->lerpAngles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
ARGP4
ADDRLP4 188
ARGP4
ADDRLP4 272
CNSTP4 0
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1384
;1384:			VectorCopy(cent->lerpOrigin, muzzlePoint );
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRB
ASGNB 12
line 1385
;1385:		}
LABELV $816
LABELV $804
line 1388
;1386:
;1387:	// FIXME: crouch
;1388:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1390
;1389:
;1390:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 272
CNSTF4 1096810496
ASGNF4
ADDRLP4 176
ADDRLP4 176
INDIRF4
ADDRLP4 272
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 272
INDIRF4
ADDRLP4 188+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1096810496
ADDRLP4 188+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1393
;1391:
;1392:	// project forward by the lightning range
;1393:	VectorMA( muzzlePoint, mod_lgrange, forward, endPoint );
ADDRLP4 276
ADDRGP4 mod_lgrange
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 256
ADDRLP4 176
INDIRF4
ADDRLP4 188
INDIRF4
ADDRLP4 276
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 256+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 188+4
INDIRF4
ADDRLP4 276
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 256+8
ADDRLP4 176+8
INDIRF4
ADDRLP4 188+8
INDIRF4
ADDRGP4 mod_lgrange
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1396
;1394:
;1395:	// see if it hit a wall
;1396:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint,
ADDRLP4 200
ARGP4
ADDRLP4 176
ARGP4
ADDRLP4 280
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 256
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1400
;1397:	          cent->currentState.number, MASK_SHOT );
;1398:
;1399:	// this is the endpoint
;1400:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 200+12
INDIRB
ASGNB 12
line 1404
;1401:
;1402:	// use the provided origin, even though it may be slightly
;1403:	// different than the muzzle origin
;1404:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1406
;1405:
;1406:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1407
;1407:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+180268+260
INDIRI4
ASGNI4
line 1408
;1408:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1411
;1409:
;1410:	// add the impact flare if it hit something
;1411:	if ( trace.fraction < 1.0 ) {
ADDRLP4 200+8
INDIRF4
CNSTF4 1065353216
GEF4 $856
line 1415
;1412:		vec3_t	angles;
;1413:		vec3_t	dir;
;1414:
;1415:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 284
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 284+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 284+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1416
;1416:		VectorNormalize( dir );
ADDRLP4 284
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1418
;1417:
;1418:		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1419
;1419:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+180268+608
INDIRI4
ASGNI4
line 1421
;1420:
;1421:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 200+12
INDIRF4
CNSTF4 3246391296
ADDRLP4 284
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 200+12+4
INDIRF4
CNSTF4 3246391296
ADDRLP4 284+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 200+12+8
INDIRF4
CNSTF4 3246391296
ADDRLP4 284+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1424
;1422:
;1423:		// make a random orientation
;1424:		angles[0] = rand() % 360;
ADDRLP4 308
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296
ADDRLP4 308
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1425
;1425:		angles[1] = rand() % 360;
ADDRLP4 312
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296+4
ADDRLP4 312
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1426
;1426:		angles[2] = rand() % 360;
ADDRLP4 316
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 296+8
ADDRLP4 316
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1427
;1427:		AnglesToAxis( angles, beam.axis );
ADDRLP4 296
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1428
;1428:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1429
;1429:	}
LABELV $856
line 1430
;1430:}
LABELV $800
endproc CG_LightningBolt 320 28
proc CG_SpawnRailTrail 4 12
line 1504
;1431:/*
;1432:
;1433:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1434:	trace_t		trace;
;1435:	refEntity_t		beam;
;1436:	vec3_t			forward;
;1437:	vec3_t			muzzlePoint, endPoint;
;1438:
;1439:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1440:		return;
;1441:	}
;1442:
;1443:	memset( &beam, 0, sizeof( beam ) );
;1444:
;1445:	// find muzzle point for this frame
;1446:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1447:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1448:
;1449:	// FIXME: crouch
;1450:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1451:
;1452:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1453:
;1454:	// project forward by the lightning range
;1455:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1456:
;1457:	// see if it hit a wall
;1458:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint,
;1459:		cent->currentState.number, MASK_SHOT );
;1460:
;1461:	// this is the endpoint
;1462:	VectorCopy( trace.endpos, beam.oldorigin );
;1463:
;1464:	// use the provided origin, even though it may be slightly
;1465:	// different than the muzzle origin
;1466:	VectorCopy( origin, beam.origin );
;1467:
;1468:	beam.reType = RT_LIGHTNING;
;1469:	beam.customShader = cgs.media.lightningShader;
;1470:	trap_R_AddRefEntityToScene( &beam );
;1471:
;1472:	// add the impact flare if it hit something
;1473:	if ( trace.fraction < 1.0 ) {
;1474:		vec3_t	angles;
;1475:		vec3_t	dir;
;1476:
;1477:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1478:		VectorNormalize( dir );
;1479:
;1480:		memset( &beam, 0, sizeof( beam ) );
;1481:		beam.hModel = cgs.media.lightningExplosionModel;
;1482:
;1483:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1484:
;1485:		// make a random orientation
;1486:		angles[0] = rand() % 360;
;1487:		angles[1] = rand() % 360;
;1488:		angles[2] = rand() % 360;
;1489:		AnglesToAxis( angles, beam.axis );
;1490:		trap_R_AddRefEntityToScene( &beam );
;1491:	}
;1492:}
;1493:*/
;1494:
;1495:/*
;1496:===============
;1497:CG_SpawnRailTrail
;1498:
;1499:Origin will be the exact tag point, which is slightly
;1500:different than the muzzle point used for determining hits.
;1501:===============
;1502:*/
;1503:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin )
;1504:{
line 1507
;1505:	clientInfo_t	*ci;
;1506:
;1507:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $890
line 1508
;1508:		return;
ADDRGP4 $889
JUMPV
LABELV $890
line 1510
;1509:	}
;1510:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $892
line 1511
;1511:		return;
ADDRGP4 $889
JUMPV
LABELV $892
line 1513
;1512:	}
;1513:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
CNSTI4 1
ASGNI4
line 1514
;1514:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
CNSTI4 2120
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 1515
;1515:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1516
;1516:}
LABELV $889
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 40 16
line 1527
;1517:
;1518:
;1519:/*
;1520:======================
;1521:CG_MachinegunSpinAngle
;1522:======================
;1523:*/
;1524:#define		SPIN_SPEED	0.9
;1525:#define		COAST_TIME	1000
;1526:static float	CG_MachinegunSpinAngle( centity_t *cent )
;1527:{
line 1532
;1528:	int		delta;
;1529:	float	angle;
;1530:	float	speed;
;1531:
;1532:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1533
;1533:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
EQI4 $897
line 1534
;1534:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
CNSTF4 1063675494
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1535
;1535:	}
ADDRGP4 $898
JUMPV
LABELV $897
line 1536
;1536:	else {
line 1537
;1537:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $899
line 1538
;1538:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1539
;1539:		}
LABELV $899
line 1541
;1540:
;1541:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTF4 1056964608
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
CNSTF4 1063675494
ADDF4
MULF4
ASGNF4
line 1542
;1542:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1543
;1543:	}
LABELV $898
line 1545
;1544:
;1545:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $904
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $905
JUMPV
LABELV $904
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $905
ADDRLP4 16
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $901
line 1546
;1546:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1547
;1547:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1548
;1548:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $908
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $909
JUMPV
LABELV $908
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $909
ADDRLP4 28
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1550
;1549://#ifdef MISSIONPACK
;1550:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 13
NEI4 $910
ADDRLP4 32
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $910
line 1551
;1551:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
ADDRGP4 $912
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1552
;1552:		}
LABELV $910
line 1554
;1553://#endif
;1554:	}
LABELV $901
line 1556
;1555:
;1556:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $895
endproc CG_MachinegunSpinAngle 40 16
proc CG_AddWeaponWithPowerups 0 4
line 1566
;1557:}
;1558:
;1559:
;1560:/*
;1561:========================
;1562:CG_AddWeaponWithPowerups
;1563:========================
;1564:*/
;1565:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups )
;1566:{
line 1568
;1567:	// add powerup effects
;1568:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $914
line 1569
;1569:		if( (cgs.dmflags & DF_INVIS) == 0) {
ADDRGP4 cgs+31460
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $915
line 1570
;1570:			gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+556
INDIRI4
ASGNI4
line 1571
;1571:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1572
;1572:		}
line 1573
;1573:	}
ADDRGP4 $915
JUMPV
LABELV $914
line 1574
;1574:	else {
line 1575
;1575:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1577
;1576:
;1577:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $921
line 1578
;1578:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+568
INDIRI4
ASGNI4
line 1579
;1579:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1580
;1580:		}
LABELV $921
line 1581
;1581:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $925
line 1582
;1582:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+180268+552
INDIRI4
ASGNI4
line 1583
;1583:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1584
;1584:		}
LABELV $925
line 1585
;1585:	}
LABELV $915
line 1586
;1586:}
LABELV $913
endproc CG_AddWeaponWithPowerups 0 4
proc MuzzleFlashStyleQ1 232 20
line 1588
;1587:
;1588:static void MuzzleFlashStyleQ1(refEntity_t *parent, playerState_t *ps, centity_t *cent, weapon_t weaponNum, centity_t *nonPredictedCent, refEntity_t	*gun, weaponInfo_t *weapon) {
line 1591
;1589:	vec3_t		angles;
;1590:	refEntity_t	flash;
;1591:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 188
ADDRFP4 12
INDIRI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 6
EQI4 $933
ADDRLP4 188
INDIRI4
CNSTI4 1
EQI4 $933
ADDRLP4 188
INDIRI4
CNSTI4 10
NEI4 $930
LABELV $933
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $930
line 1592
;1592:			&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 1594
;1593:		// continuous flash
;1594:	}
ADDRGP4 $931
JUMPV
LABELV $930
line 1595
;1595:	else {
line 1597
;1596:		// impulse flash
;1597:		if ( cg.time - cent->muzzleFlashTime > 200 && !cent->pe.railgunFlash ) {
ADDRLP4 192
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 192
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 200
LEI4 $934
ADDRLP4 192
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $934
line 1598
;1598:			return;
ADDRGP4 $929
JUMPV
LABELV $934
line 1600
;1599:		}
;1600:	}
LABELV $931
line 1601
;1601:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1602
;1602:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1603
;1603:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1604
;1604:	flash.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1606
;1605:
;1606:	flash.hModel = weapon->flashModel_type1;
ADDRLP4 0+8
ADDRFP4 24
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 1607
;1607:	if (!flash.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $941
line 1608
;1608:		return;
ADDRGP4 $929
JUMPV
LABELV $941
line 1610
;1609:	}
;1610:	angles[YAW] = 0;
ADDRLP4 176+4
CNSTF4 0
ASGNF4
line 1611
;1611:	angles[PITCH] = 0;
ADDRLP4 176
CNSTF4 0
ASGNF4
line 1612
;1612:	angles[ROLL] = 0;	// don't roll randomly.
ADDRLP4 176+8
CNSTF4 0
ASGNF4
line 1613
;1613:	AnglesToAxis( angles, flash.axis );
ADDRLP4 176
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1617
;1614:
;1615:
;1616:	// downscale hack
;1617:	if ( cg.time - cent->muzzleFlashTime > 100 ){
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
LEI4 $947
line 1618
;1618:		VectorScale(flash.axis[0], 1.5, flash.axis[0]);
ADDRLP4 0+28
CNSTF4 1069547520
ADDRLP4 0+28
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
CNSTF4 1069547520
ADDRLP4 0+28+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
CNSTF4 1069547520
ADDRLP4 0+28+8
INDIRF4
MULF4
ASGNF4
line 1619
;1619:		VectorScale(flash.axis[1], 1.5, flash.axis[1]);
ADDRLP4 0+28+12
CNSTF4 1069547520
ADDRLP4 0+28+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
CNSTF4 1069547520
ADDRLP4 0+28+12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
CNSTF4 1069547520
ADDRLP4 0+28+12+8
INDIRF4
MULF4
ASGNF4
line 1620
;1620:		VectorScale(flash.axis[2], 1.5, flash.axis[2]);
ADDRLP4 0+28+24
CNSTF4 1069547520
ADDRLP4 0+28+24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
CNSTF4 1069547520
ADDRLP4 0+28+24+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
CNSTF4 1069547520
ADDRLP4 0+28+24+8
INDIRF4
MULF4
ASGNF4
line 1621
;1621:	}
LABELV $947
line 1624
;1622:
;1623:	// colorize the railgun blast
;1624:	if ( weaponNum == WP_RAILGUN ) {
ADDRFP4 12
INDIRI4
CNSTI4 7
NEI4 $992
line 1627
;1625:		clientInfo_t	*ci;
;1626:
;1627:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 192
CNSTI4 2120
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 1628
;1628:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 200
CNSTF4 1132396544
ADDRLP4 192
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 204
CNSTF4 1325400064
ASGNF4
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
LTF4 $997
ADDRLP4 196
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $998
JUMPV
LABELV $997
ADDRLP4 196
ADDRLP4 200
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $998
ADDRLP4 0+116
ADDRLP4 196
INDIRU4
CVUU1 4
ASGNU1
line 1629
;1629:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 212
CNSTF4 1132396544
ADDRLP4 192
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 216
CNSTF4 1325400064
ASGNF4
ADDRLP4 212
INDIRF4
ADDRLP4 216
INDIRF4
LTF4 $1002
ADDRLP4 208
ADDRLP4 212
INDIRF4
ADDRLP4 216
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1003
JUMPV
LABELV $1002
ADDRLP4 208
ADDRLP4 212
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1003
ADDRLP4 0+116+1
ADDRLP4 208
INDIRU4
CVUU1 4
ASGNU1
line 1630
;1630:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 224
CNSTF4 1132396544
ADDRLP4 192
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 228
CNSTF4 1325400064
ASGNF4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
LTF4 $1007
ADDRLP4 220
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1008
JUMPV
LABELV $1007
ADDRLP4 220
ADDRLP4 224
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1008
ADDRLP4 0+116+2
ADDRLP4 220
INDIRU4
CVUU1 4
ASGNU1
line 1631
;1631:	}
LABELV $992
line 1633
;1632:
;1633:	CG_PositionRotatedEntityOnTag( &flash, gun, weapon->weaponModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRFP4 20
INDIRP4
ARGP4
ADDRFP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1636
;1634:
;1635:	// leilei - allow the flash to go away 
;1636:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1638
;1637:
;1638:	if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1016
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1016
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1010
LABELV $1016
line 1639
;1639:			cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1641
;1640:		// add lightning bolt
;1641:		if ( cg.time - cent->muzzleFlashTime < 100 && !cent->pe.railgunFlash )// leilei - don't prolong the lightning
ADDRLP4 192
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 192
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1017
ADDRLP4 192
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1017
line 1642
;1642:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
LABELV $1017
line 1645
;1643:
;1644:		// add rail trail
;1645:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1647
;1646:
;1647:		if ( cg.time - cent->muzzleFlashTime < 100 )	// flash for 0.1 sec
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1022
line 1648
;1648:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 196
ADDRFP4 24
INDIRP4
ASGNP4
ADDRLP4 200
CNSTF4 0
ASGNF4
ADDRLP4 196
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
NEF4 $1028
ADDRLP4 196
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
NEF4 $1028
ADDRLP4 196
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
EQF4 $1025
LABELV $1028
line 1649
;1649:			trap_R_AddLightToScene( parent->origin, 300, 0.95,
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTF4 1133903872
ARGF4
ADDRLP4 204
CNSTF4 1064514355
ASGNF4
ADDRLP4 204
INDIRF4
ARGF4
ADDRLP4 204
INDIRF4
ARGF4
ADDRLP4 204
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1651
;1650:									0.95, 0.95 );	// mono lighting
;1651:		}
LABELV $1025
LABELV $1022
line 1652
;1652:	}
LABELV $1010
line 1653
;1653:}
LABELV $929
endproc MuzzleFlashStyleQ1 232 20
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 656 28
line 1666
;1654:
;1655:/*
;1656:=============
;1657:CG_AddPlayerWeapon
;1658:
;1659:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1660:The main player will have this called for BOTH cases, so effects like light and
;1661:sound should only be done on the world model case.
;1662:=============
;1663:*/
;1664:
;1665:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team )
;1666:{
line 1677
;1667:	refEntity_t	gun;
;1668:	refEntity_t	barrel;
;1669:	refEntity_t	flash;
;1670:	vec3_t		angles;
;1671:	weapon_t	weaponNum;
;1672:	weaponInfo_t	*weapon;
;1673:	centity_t	*nonPredictedCent;
;1674:	orientation_t	lerped;
;1675:
;1676:
;1677:	weaponNum = cent->currentState.weapon;
ADDRLP4 404
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1679
;1678:
;1679:	CG_RegisterWeapon( weaponNum );
ADDRLP4 404
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1680
;1680:	weapon = &cg_weapons[weaponNum];
ADDRLP4 352
CNSTI4 172
ADDRLP4 404
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1683
;1681:
;1682:	// add the weapon
;1683:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1684
;1684:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1685
;1685:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1686
;1686:	gun.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1689
;1687:
;1688:	// set custom shading for railgun refire rate
;1689:	if ( ps || cent->currentState.clientNum == cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1037
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $1033
LABELV $1037
line 1690
;1690:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
NEI4 $1038
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $1038
line 1691
;1691:		        && cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1694
;1692:			float	f;
;1693:
;1694:			f = (float)cg.predictedPlayerState.weaponTime / 1500;
ADDRLP4 600
ADDRGP4 cg+107636+44
INDIRI4
CVIF4 4
CNSTF4 1153138688
DIVF4
ASGNF4
line 1695
;1695:			gun.shaderRGBA[1] = 0;
ADDRLP4 0+116+1
CNSTU1 0
ASGNU1
line 1696
;1696:			gun.shaderRGBA[0] =
ADDRLP4 608
CNSTF4 1132396544
CNSTF4 1065353216
ADDRLP4 600
INDIRF4
SUBF4
MULF4
ASGNF4
ADDRLP4 612
CNSTF4 1325400064
ASGNF4
ADDRLP4 608
INDIRF4
ADDRLP4 612
INDIRF4
LTF4 $1052
ADDRLP4 604
ADDRLP4 608
INDIRF4
ADDRLP4 612
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1053
JUMPV
LABELV $1052
ADDRLP4 604
ADDRLP4 608
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1053
ADDRLP4 616
ADDRLP4 604
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 0+116+2
ADDRLP4 616
INDIRU1
ASGNU1
ADDRLP4 0+116
ADDRLP4 616
INDIRU1
ASGNU1
line 1698
;1697:			    gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;1698:		}
ADDRGP4 $1039
JUMPV
LABELV $1038
line 1699
;1699:		else {
line 1700
;1700:			gun.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1701
;1701:			gun.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 1702
;1702:			gun.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 1703
;1703:			gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1704
;1704:		}
LABELV $1039
line 1705
;1705:	}
LABELV $1033
line 1707
;1706:
;1707:	gun.hModel = weapon->weaponModel;
ADDRLP4 0+8
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1708
;1708:	if (!gun.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1062
line 1709
;1709:		return;
ADDRGP4 $1029
JUMPV
LABELV $1062
line 1712
;1710:	}
;1711:
;1712:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1065
line 1714
;1713:		// add weapon ready sound
;1714:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 604
ADDP4
CNSTI4 0
ASGNI4
line 1715
;1715:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRLP4 600
CNSTI4 0
ASGNI4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
ADDRLP4 600
INDIRI4
EQI4 $1067
ADDRLP4 352
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ADDRLP4 600
INDIRI4
EQI4 $1067
line 1717
;1716:			// lightning gun and guantlet make a different sound when fire is held down
;1717:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 604
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 604
INDIRP4
INDIRI4
ARGI4
ADDRLP4 604
INDIRP4
CNSTI4 776
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1718
;1718:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 604
ADDP4
CNSTI4 1
ASGNI4
line 1719
;1719:		}
ADDRGP4 $1068
JUMPV
LABELV $1067
line 1720
;1720:		else if ( weapon->readySound ) {
ADDRLP4 352
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1069
line 1721
;1721:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 604
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 604
INDIRP4
INDIRI4
ARGI4
ADDRLP4 604
INDIRP4
CNSTI4 776
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1722
;1722:		}
LABELV $1069
LABELV $1068
line 1723
;1723:	}
LABELV $1065
line 1725
;1724:
;1725:	trap_R_LerpTag(&lerped, parent->hModel, parent->oldframe, parent->frame,
ADDRLP4 356
ARGP4
ADDRLP4 600
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 600
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 600
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 600
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 600
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRGP4 $1071
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 1727
;1726:	               1.0 - parent->backlerp, "tag_weapon");
;1727:	VectorCopy(parent->origin, gun.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 1729
;1728:
;1729:	VectorMA(gun.origin, lerped.origin[0], parent->axis[0], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
line 1732
;1730:
;1731:	// Make weapon appear left-handed for 2 and centered for 3
;1732:	if(ps && cg_drawGun.integer == 2)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1083
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 2
NEI4 $1083
line 1733
;1733:		VectorMA(gun.origin, -lerped.origin[1], parent->axis[1], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $1084
JUMPV
LABELV $1083
line 1734
;1734:	else if(!ps || cg_drawGun.integer != 3)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1102
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 3
EQI4 $1099
LABELV $1102
line 1735
;1735:		VectorMA(gun.origin, lerped.origin[1], parent->axis[1], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $1099
LABELV $1084
line 1737
;1736:
;1737:	VectorMA(gun.origin, lerped.origin[2], parent->axis[2], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1739
;1738:
;1739:	MatrixMultiply(lerped.axis, ((refEntity_t *)parent)->axis, gun.axis);
ADDRLP4 356+12
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 1740
;1740:	gun.backlerp = parent->backlerp;
ADDRLP4 0+100
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1742
;1741:
;1742:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1745
;1743:
;1744:	// add the spinning barrel
;1745:	if ( weapon->barrelModel ) {
ADDRLP4 352
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1132
line 1746
;1746:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 424
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1747
;1747:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 424+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1748
;1748:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 424+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1749
;1749:		barrel.renderfx = parent->renderfx;
ADDRLP4 424+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1751
;1750:
;1751:		barrel.hModel = weapon->barrelModel;
ADDRLP4 424+8
ADDRLP4 352
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1752
;1752:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1753
;1753:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1754
;1754:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 604
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 408+8
ADDRLP4 604
INDIRF4
ASGNF4
line 1755
;1755:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 408
ARGP4
ADDRLP4 424+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1757
;1756:
;1757:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 424
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1141
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1759
;1758:
;1759:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 424
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1760
;1760:	}
LABELV $1132
line 1763
;1761:
;1762:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1763:	nonPredictedCent = &cg_entities[cent->currentState.number];
ADDRLP4 420
CNSTI4 936
ADDRFP4 8
INDIRP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1768
;1764:
;1765:	// if the index of the nonPredictedCent is not the same as the clientNum
;1766:	// then this is a fake player (like on teh single player podiums), so
;1767:	// go ahead and use the cent
;1768:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 420
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 936
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $1142
line 1769
;1769:		nonPredictedCent = cent;
ADDRLP4 420
ADDRFP4 8
INDIRP4
ASGNP4
line 1770
;1770:	}
LABELV $1142
line 1784
;1771:
;1772:
;1773:	// add the flash
;1774:
;1775:	// leilei - split into 5 styles:
;1776:	// 1 - Q3 (default)
;1777:	// 2 - q1
;1778:	// 3 - fake99
;1779:	// 4 - 64
;1780:	// 5 - anime 
;1781:	// 6 - fake2003
;1782:
;1783:
;1784:	if (cg_muzzleflashStyle.integer == 2)
ADDRGP4 cg_muzzleflashStyle+12
INDIRI4
CNSTI4 2
NEI4 $1144
line 1785
;1785:	{
line 1786
;1786:		MuzzleFlashStyleQ1(parent, ps, cent, weaponNum, nonPredictedCent, &gun, weapon);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 404
INDIRI4
ARGI4
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
ARGP4
ADDRGP4 MuzzleFlashStyleQ1
CALLV
pop
line 1787
;1787:		return;	// Override third person flash so we can have a different model and lighting origin
ADDRGP4 $1029
JUMPV
LABELV $1144
line 1789
;1788:	}
;1789:	else if (cg_muzzleflashStyle.integer == 3)	// "fake '99"
ADDRGP4 cg_muzzleflashStyle+12
INDIRI4
CNSTI4 3
NEI4 $1147
line 1790
;1790:	{
line 1791
;1791:		if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 404
INDIRI4
CNSTI4 6
EQI4 $1153
ADDRLP4 404
INDIRI4
CNSTI4 1
EQI4 $1153
ADDRLP4 404
INDIRI4
CNSTI4 10
NEI4 $1150
LABELV $1153
ADDRLP4 420
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1150
line 1792
;1792:		        && ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 1794
;1793:			// continuous flash
;1794:		}
ADDRGP4 $1151
JUMPV
LABELV $1150
line 1795
;1795:		else {
line 1797
;1796:			// impulse flash
;1797:			if ( cg.time - cent->muzzleFlashTime > 120 && !cent->pe.railgunFlash ) {
ADDRLP4 608
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 608
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 120
LEI4 $1154
ADDRLP4 608
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1154
line 1798
;1798:				return;
ADDRGP4 $1029
JUMPV
LABELV $1154
line 1800
;1799:			}
;1800:		}
LABELV $1151
line 1802
;1801:	
;1802:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1803
;1803:		VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1804
;1804:		flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1805
;1805:		flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1807
;1806:	
;1807:		if (cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson)	// use 3rd person flash model
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1160
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1160
line 1808
;1808:		flash.hModel = weapon->flashModel_type2;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $1161
JUMPV
LABELV $1160
line 1810
;1809:		else
;1810:		flash.hModel = weapon->flashModel_type2a;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ASGNI4
LABELV $1161
line 1812
;1811:
;1812:		if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1166
line 1813
;1813:			return;
ADDRGP4 $1029
JUMPV
LABELV $1166
line 1815
;1814:		}
;1815:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1816
;1816:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1817
;1817:		angles[ROLL] = crandom() * 360;	
ADDRLP4 608
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 408+8
CNSTF4 1135869952
CNSTF4 1073741824
ADDRLP4 608
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 1818
;1818:		if (cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson) {
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1171
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1171
line 1820
;1819:			// don't roll the first person
;1820:			angles[ROLL] = 0;
ADDRLP4 408+8
CNSTF4 0
ASGNF4
line 1821
;1821:		}
LABELV $1171
line 1823
;1822:
;1823:		AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1827
;1824:
;1825:		// UT's beam weapons didn't have muzzleflashes, so we don't either.
;1826:
;1827:		CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1830
;1828:	
;1829:		// leilei - allow the flash to go away 
;1830:		trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1832
;1831:	
;1832:		if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1183
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1183
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1029
LABELV $1183
line 1833
;1833:		        cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1835
;1834:			// add lightning bolt
;1835:			if ( cg.time - cent->muzzleFlashTime < 100 && !cent->pe.railgunFlash ) {
ADDRLP4 612
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 612
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1184
ADDRLP4 612
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1184
line 1837
;1836:				// leilei - don't prolong the lightning
;1837:				CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1838
;1838:			}
LABELV $1184
line 1841
;1839:	
;1840:			// add rail trail
;1841:			CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1843
;1842:	
;1843:			if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 620
CNSTF4 0
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
NEF4 $1192
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
NEF4 $1192
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
EQF4 $1029
LABELV $1192
line 1844
;1844:				trap_R_AddLightToScene( parent->origin, 150, weapon->flashDlightColor[0],
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTF4 1125515264
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1846
;1845:				                        weapon->flashDlightColor[1], weapon->flashDlightColor[2] );	// also comes from player center
;1846:			}
line 1847
;1847:		}
line 1848
;1848:		return;	// Override third person flash so we can have a different model and lighting origin
ADDRGP4 $1029
JUMPV
LABELV $1147
line 1850
;1849:	}
;1850:	else if (cg_muzzleflashStyle.integer == 4)	// "64". alpha muzzle sprites only, is a shader sequence
ADDRGP4 cg_muzzleflashStyle+12
INDIRI4
CNSTI4 4
NEI4 $1193
line 1851
;1851:	{
line 1852
;1852:		if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 404
INDIRI4
CNSTI4 6
EQI4 $1199
ADDRLP4 404
INDIRI4
CNSTI4 1
EQI4 $1199
ADDRLP4 404
INDIRI4
CNSTI4 10
NEI4 $1196
LABELV $1199
ADDRLP4 420
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1196
line 1853
;1853:		        && ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 1855
;1854:			// continuous flash
;1855:		}
ADDRGP4 $1197
JUMPV
LABELV $1196
line 1856
;1856:		else {
line 1858
;1857:			// impulse flash
;1858:			if ( cg.time - cent->muzzleFlashTime > 240 && !cent->pe.railgunFlash ) {
ADDRLP4 608
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 608
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 240
LEI4 $1200
ADDRLP4 608
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1200
line 1859
;1859:				return;
ADDRGP4 $1029
JUMPV
LABELV $1200
line 1861
;1860:			}
;1861:		}
LABELV $1197
line 1863
;1862:	
;1863:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1864
;1864:		VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1865
;1865:		flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1866
;1866:		flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1867
;1867:		flash.hModel = weapon->flashModel_type3;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 156
ADDP4
INDIRI4
ASGNI4
line 1869
;1868:
;1869:		if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1207
line 1870
;1870:			return;
ADDRGP4 $1029
JUMPV
LABELV $1207
line 1872
;1871:		}
;1872:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1873
;1873:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1874
;1874:		angles[ROLL] = 0;	
ADDRLP4 408+8
CNSTF4 0
ASGNF4
line 1876
;1875:
;1876:		AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1878
;1877:		// set shadertime
;1878:		flash.shaderTime = cent->muzzleFlashTime / 1000.0f;
ADDRLP4 176+128
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 1882
;1879:
;1880:		// UT's beam weapons didn't have muzzleflashes, so we don't either.
;1881:
;1882:		CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1884
;1883:	
;1884:		trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1886
;1885:	
;1886:		if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1220
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1220
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1029
LABELV $1220
line 1887
;1887:		        cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1889
;1888:			// add lightning bolt
;1889:			if ( cg.time - cent->muzzleFlashTime < 100 && !cent->pe.railgunFlash )// leilei - don't prolong the lightning
ADDRLP4 608
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 608
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1221
ADDRLP4 608
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1221
line 1890
;1890:			CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
LABELV $1221
line 1893
;1891:	
;1892:			// add rail trail
;1893:			CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1895
;1894:	
;1895:			if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 616
CNSTF4 0
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1229
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1229
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
EQF4 $1029
LABELV $1229
line 1896
;1896:				trap_R_AddLightToScene( parent->origin, 150, weapon->flashDlightColor[0],
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTF4 1125515264
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1898
;1897:				                        weapon->flashDlightColor[1], weapon->flashDlightColor[2] );	// also comes from player center
;1898:			}
line 1899
;1899:		}
line 1900
;1900:		return;	// Override third person flash so we can have a different model and lighting origin
ADDRGP4 $1029
JUMPV
LABELV $1193
line 1902
;1901:	}
;1902:	else if (cg_muzzleflashStyle.integer == 5)	// anime. the idea is similar to fake2003, but scaling differs between first and third
ADDRGP4 cg_muzzleflashStyle+12
INDIRI4
CNSTI4 5
NEI4 $1230
line 1903
;1903:	{						// and allow artist creativity to define how it should fade away
line 1906
;1904:		
;1905:		float fadeout;
;1906:		if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 404
INDIRI4
CNSTI4 6
EQI4 $1236
ADDRLP4 404
INDIRI4
CNSTI4 1
EQI4 $1236
ADDRLP4 404
INDIRI4
CNSTI4 10
NEI4 $1233
LABELV $1236
ADDRLP4 420
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1233
line 1907
;1907:		        && ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 1909
;1908:			// continuous flash
;1909:		}
ADDRGP4 $1234
JUMPV
LABELV $1233
line 1910
;1910:		else {
line 1912
;1911:			// impulse flash
;1912:			if ( cg.time - cent->muzzleFlashTime > 400 && !cent->pe.railgunFlash ) {
ADDRLP4 612
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 612
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 400
LEI4 $1237
ADDRLP4 612
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1237
line 1913
;1913:				return;
ADDRGP4 $1029
JUMPV
LABELV $1237
line 1915
;1914:			}
;1915:		}
LABELV $1234
line 1917
;1916:		
;1917:		fadeout = ((400 - (cg.time - cent->muzzleFlashTime)) * 0.001);
ADDRLP4 604
CNSTF4 981668463
CNSTI4 400
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 1918
;1918:		if (fadeout < 0) return; // if we faded, we don't draw. ok
ADDRLP4 604
INDIRF4
CNSTF4 0
GEF4 $1241
ADDRGP4 $1029
JUMPV
LABELV $1241
line 1920
;1919:	
;1920:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1921
;1921:		VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1922
;1922:		flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1923
;1923:		flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1925
;1924:
;1925:		if (cg.time - cent->muzzleFlashTime < 5) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 5
GEI4 $1246
line 1927
;1926:			// hopefully no one will notice the jitter at this rate
;1927:			cent->startroll = crandom() * 720;
ADDRLP4 612
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
CNSTI4 888
ADDP4
CNSTF4 1144258560
CNSTF4 1073741824
ADDRLP4 612
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 1928
;1928:		}
LABELV $1246
line 1930
;1929:	
;1930:		flash.hModel = weapon->flashModel_type4;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ASGNI4
line 1931
;1931:		if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1250
line 1932
;1932:			return;
ADDRGP4 $1029
JUMPV
LABELV $1250
line 1934
;1933:		}
;1934:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1935
;1935:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1936
;1936:		angles[ROLL] = cent->startroll;
ADDRLP4 408+8
ADDRFP4 8
INDIRP4
CNSTI4 888
ADDP4
INDIRF4
ASGNF4
line 1938
;1937:
;1938:		AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1942
;1939:
;1940:
;1941:		// Expand, and fade
;1942:		{
line 1944
;1943:			float eh;
;1944:			if (cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson)	
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1256
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1256
line 1945
;1945:			eh = (cg.time - cent->muzzleFlashTime) * 0.003 + 0.2;
ADDRLP4 612
CNSTF4 994352038
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1045220557
ADDF4
ASGNF4
ADDRGP4 $1257
JUMPV
LABELV $1256
line 1947
;1946:			else
;1947:			eh = (cg.time - cent->muzzleFlashTime) * 0.007 + 0.6;
ADDRLP4 612
CNSTF4 1004888130
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
LABELV $1257
line 1948
;1948:			VectorScale(flash.axis[0], eh, flash.axis[0]);
ADDRLP4 176+28
ADDRLP4 176+28
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+4
ADDRLP4 176+28+4
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+8
ADDRLP4 176+28+8
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
line 1949
;1949:			VectorScale(flash.axis[1], eh, flash.axis[1]);
ADDRLP4 176+28+12
ADDRLP4 176+28+12
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+4
ADDRLP4 176+28+12+4
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+8
ADDRLP4 176+28+12+8
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
line 1950
;1950:			VectorScale(flash.axis[2], eh, flash.axis[2]);
ADDRLP4 176+28+24
ADDRLP4 176+28+24
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+24+4
ADDRLP4 176+28+24+4
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+24+8
ADDRLP4 176+28+24+8
INDIRF4
ADDRLP4 612
INDIRF4
MULF4
ASGNF4
line 1952
;1951:
;1952:			flash.shaderRGBA[0] = 255;
ADDRLP4 176+116
CNSTU1 255
ASGNU1
line 1953
;1953:			flash.shaderRGBA[1] = 255;
ADDRLP4 176+116+1
CNSTU1 255
ASGNU1
line 1954
;1954:			flash.shaderRGBA[2] = 255;
ADDRLP4 176+116+2
CNSTU1 255
ASGNU1
line 1957
;1955:
;1956:			// leilei - scale hack, flip the flash 
;1957:			if (cent->startroll > 360)
ADDRFP4 8
INDIRP4
CNSTI4 888
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $1309
line 1958
;1958:			VectorScale(flash.axis[1], -1, flash.axis[1]);
ADDRLP4 176+28+12
CNSTF4 3212836864
ADDRLP4 176+28+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+4
CNSTF4 3212836864
ADDRLP4 176+28+12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+8
CNSTF4 3212836864
ADDRLP4 176+28+12+8
INDIRF4
MULF4
ASGNF4
LABELV $1309
line 1961
;1959:
;1960:
;1961:		}
line 1964
;1962:
;1963:		// set shadertime
;1964:		flash.shaderTime = cent->muzzleFlashTime / 1000.0f;
ADDRLP4 176+128
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 1967
;1965:
;1966:		// colorize the railgun blast
;1967:		if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 404
INDIRI4
CNSTI4 7
NEI4 $1328
line 1970
;1968:			clientInfo_t	*ci;
;1969:	
;1970:			ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 612
CNSTI4 2120
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 1971
;1971:			flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 620
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 624
CNSTF4 1325400064
ASGNF4
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
LTF4 $1333
ADDRLP4 616
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1334
JUMPV
LABELV $1333
ADDRLP4 616
ADDRLP4 620
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1334
ADDRLP4 176+116
ADDRLP4 616
INDIRU4
CVUU1 4
ASGNU1
line 1972
;1972:			flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 632
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 636
CNSTF4 1325400064
ASGNF4
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
LTF4 $1338
ADDRLP4 628
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1339
JUMPV
LABELV $1338
ADDRLP4 628
ADDRLP4 632
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1339
ADDRLP4 176+116+1
ADDRLP4 628
INDIRU4
CVUU1 4
ASGNU1
line 1973
;1973:			flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 644
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 648
CNSTF4 1325400064
ASGNF4
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
LTF4 $1343
ADDRLP4 640
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1344
JUMPV
LABELV $1343
ADDRLP4 640
ADDRLP4 644
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1344
ADDRLP4 176+116+2
ADDRLP4 640
INDIRU4
CVUU1 4
ASGNU1
line 1974
;1974:		}
LABELV $1328
line 1976
;1975:
;1976:		CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1979
;1977:
;1978:		// leilei - allow the flash to go away 
;1979:		trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1981
;1980:
;1981:		if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1351
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1351
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1029
LABELV $1351
line 1982
;1982:				cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1984
;1983:			// add lightning bolt
;1984:			if ( cg.time - cent->muzzleFlashTime < 100 && !cent->pe.railgunFlash ) {
ADDRLP4 612
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 612
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1352
ADDRLP4 612
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1352
line 1986
;1985:				// leilei - don't prolong the lightning
;1986:				CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1987
;1987:			}
LABELV $1352
line 1989
;1988:			// add rail trail
;1989:			CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1990
;1990:			if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 620
CNSTF4 0
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
NEF4 $1360
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
NEF4 $1360
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 620
INDIRF4
EQF4 $1029
LABELV $1360
line 1991
;1991:				trap_R_AddLightToScene( flash.origin, 500 * fadeout, weapon->flashDlightColor[0] * (fadeout * 4),
ADDRLP4 176+68
ARGP4
ADDRLP4 624
ADDRLP4 604
INDIRF4
ASGNF4
CNSTF4 1140457472
ADDRLP4 624
INDIRF4
MULF4
ARGF4
ADDRLP4 632
CNSTF4 1082130432
ADDRLP4 624
INDIRF4
MULF4
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1993
;1992:										weapon->flashDlightColor[1]  * (fadeout * 4), weapon->flashDlightColor[2]  * (fadeout * 4));
;1993:			}
line 1994
;1994:		}
line 1995
;1995:		return;
ADDRGP4 $1029
JUMPV
LABELV $1230
line 1998
;1996:		
;1997:	}
;1998:	else if (cg_muzzleflashStyle.integer == 6)	// "fake2003"
ADDRGP4 cg_muzzleflashStyle+12
INDIRI4
CNSTI4 6
NEI4 $1362
line 1999
;1999:	{
line 2002
;2000:		
;2001:		float fadeout;
;2002:		if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 404
INDIRI4
CNSTI4 6
EQI4 $1368
ADDRLP4 404
INDIRI4
CNSTI4 1
EQI4 $1368
ADDRLP4 404
INDIRI4
CNSTI4 10
NEI4 $1365
LABELV $1368
ADDRLP4 420
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1365
line 2003
;2003:		        && ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 2005
;2004:			// continuous flash
;2005:		}
ADDRGP4 $1366
JUMPV
LABELV $1365
line 2006
;2006:		else {
line 2008
;2007:			// impulse flash
;2008:			if ( cg.time - cent->muzzleFlashTime > 200 && !cent->pe.railgunFlash ) {
ADDRLP4 612
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 612
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 200
LEI4 $1369
ADDRLP4 612
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1369
line 2009
;2009:				return;
ADDRGP4 $1029
JUMPV
LABELV $1369
line 2011
;2010:			}
;2011:		}
LABELV $1366
line 2013
;2012:		
;2013:		fadeout = ((200 - (cg.time - cent->muzzleFlashTime)) * 0.001);
ADDRLP4 604
CNSTF4 981668463
CNSTI4 200
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 2014
;2014:		if (fadeout < 0) return; // if we faded, we don't draw. ok
ADDRLP4 604
INDIRF4
CNSTF4 0
GEF4 $1373
ADDRGP4 $1029
JUMPV
LABELV $1373
line 2016
;2015:	
;2016:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2017
;2017:		VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2018
;2018:		flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2019
;2019:		flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2021
;2020:
;2021:		if (cg.time - cent->muzzleFlashTime < 5) // hopefully no one will notice the jitter at this rate
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 5
GEI4 $1378
line 2022
;2022:		cent->startroll = crandom() * 361;
ADDRLP4 612
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
CNSTI4 888
ADDP4
CNSTF4 1135902720
CNSTF4 1073741824
ADDRLP4 612
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
LABELV $1378
line 2024
;2023:	
;2024:		if (cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson)	{
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1381
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1381
line 2026
;2025:			// use 3rd person flash model
;2026:			flash.hModel = weapon->flashModel_type5;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
ASGNI4
line 2027
;2027:		}
ADDRGP4 $1382
JUMPV
LABELV $1381
line 2028
;2028:		else {
line 2029
;2029:			flash.hModel = weapon->flashModel_type5a;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 2030
;2030:		}
LABELV $1382
line 2031
;2031:		if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1387
line 2032
;2032:			return;
ADDRGP4 $1029
JUMPV
LABELV $1387
line 2034
;2033:		}
;2034:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 2035
;2035:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 2036
;2036:		if (cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson) {
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1391
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1391
line 2038
;2037:			// pick one random angle for third person cone
;2038:			angles[ROLL] = 0;
ADDRLP4 408+8
CNSTF4 0
ASGNF4
line 2039
;2039:		}
ADDRGP4 $1392
JUMPV
LABELV $1391
line 2040
;2040:		else {
line 2041
;2041:			angles[ROLL] = cent->startroll;
ADDRLP4 408+8
ADDRFP4 8
INDIRP4
CNSTI4 888
ADDP4
INDIRF4
ASGNF4
line 2042
;2042:		}
LABELV $1392
line 2044
;2043:
;2044:		AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2048
;2045:
;2046:
;2047:		// Expand, and fade
;2048:		{
line 2049
;2049:			float eh = (cg.time - cent->muzzleFlashTime) * 0.005 + 0.6;
ADDRLP4 616
CNSTF4 1000593162
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 2050
;2050:			VectorScale(flash.axis[0], eh, flash.axis[0]);
ADDRLP4 176+28
ADDRLP4 176+28
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+4
ADDRLP4 176+28+4
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+8
ADDRLP4 176+28+8
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
line 2051
;2051:			VectorScale(flash.axis[1], eh, flash.axis[1]);
ADDRLP4 176+28+12
ADDRLP4 176+28+12
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+4
ADDRLP4 176+28+12+4
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+12+8
ADDRLP4 176+28+12+8
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
line 2052
;2052:			VectorScale(flash.axis[2], eh, flash.axis[2]);
ADDRLP4 176+28+24
ADDRLP4 176+28+24
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+24+4
ADDRLP4 176+28+24+4
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
ADDRLP4 176+28+24+8
ADDRLP4 176+28+24+8
INDIRF4
ADDRLP4 616
INDIRF4
MULF4
ASGNF4
line 2054
;2053:
;2054:			flash.shaderRGBA[0] = 255 * fadeout;
ADDRLP4 624
CNSTF4 1132396544
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 628
CNSTF4 1325400064
ASGNF4
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRF4
LTF4 $1443
ADDRLP4 620
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1444
JUMPV
LABELV $1443
ADDRLP4 620
ADDRLP4 624
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1444
ADDRLP4 176+116
ADDRLP4 620
INDIRU4
CVUU1 4
ASGNU1
line 2055
;2055:			flash.shaderRGBA[1] = 255 * fadeout;
ADDRLP4 636
CNSTF4 1132396544
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 640
CNSTF4 1325400064
ASGNF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRF4
LTF4 $1448
ADDRLP4 632
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1449
JUMPV
LABELV $1448
ADDRLP4 632
ADDRLP4 636
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1449
ADDRLP4 176+116+1
ADDRLP4 632
INDIRU4
CVUU1 4
ASGNU1
line 2056
;2056:			flash.shaderRGBA[2] = 255 * fadeout;
ADDRLP4 648
CNSTF4 1132396544
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 652
CNSTF4 1325400064
ASGNF4
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
LTF4 $1453
ADDRLP4 644
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1454
JUMPV
LABELV $1453
ADDRLP4 644
ADDRLP4 648
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1454
ADDRLP4 176+116+2
ADDRLP4 644
INDIRU4
CVUU1 4
ASGNU1
line 2058
;2057:
;2058:		}
line 2061
;2059:
;2060:		// set shadertime
;2061:		flash.shaderTime = cent->muzzleFlashTime / 1000.0f;
ADDRLP4 176+128
ADDRFP4 8
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 2064
;2062:
;2063:		// colorize the railgun blast
;2064:		if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 404
INDIRI4
CNSTI4 7
NEI4 $1456
line 2067
;2065:			clientInfo_t	*ci;
;2066:	
;2067:			ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 616
CNSTI4 2120
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 2068
;2068:			flash.shaderRGBA[0] = 255 * ci->color1[0] * fadeout;
ADDRLP4 624
CNSTF4 1132396544
ADDRLP4 616
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 628
CNSTF4 1325400064
ASGNF4
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRF4
LTF4 $1461
ADDRLP4 620
ADDRLP4 624
INDIRF4
ADDRLP4 628
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1462
JUMPV
LABELV $1461
ADDRLP4 620
ADDRLP4 624
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1462
ADDRLP4 176+116
ADDRLP4 620
INDIRU4
CVUU1 4
ASGNU1
line 2069
;2069:			flash.shaderRGBA[1] = 255 * ci->color1[1] * fadeout;
ADDRLP4 636
CNSTF4 1132396544
ADDRLP4 616
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 640
CNSTF4 1325400064
ASGNF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRF4
LTF4 $1466
ADDRLP4 632
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1467
JUMPV
LABELV $1466
ADDRLP4 632
ADDRLP4 636
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1467
ADDRLP4 176+116+1
ADDRLP4 632
INDIRU4
CVUU1 4
ASGNU1
line 2070
;2070:			flash.shaderRGBA[2] = 255 * ci->color1[2] * fadeout;
ADDRLP4 648
CNSTF4 1132396544
ADDRLP4 616
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ADDRLP4 604
INDIRF4
MULF4
ASGNF4
ADDRLP4 652
CNSTF4 1325400064
ASGNF4
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
LTF4 $1471
ADDRLP4 644
ADDRLP4 648
INDIRF4
ADDRLP4 652
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1472
JUMPV
LABELV $1471
ADDRLP4 644
ADDRLP4 648
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1472
ADDRLP4 176+116+2
ADDRLP4 644
INDIRU4
CVUU1 4
ASGNU1
line 2071
;2071:		}
LABELV $1456
line 2073
;2072:
;2073:		CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2076
;2074:
;2075:		// leilei - allow the flash to go away 
;2076:		trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2078
;2077:
;2078:		if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1479
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1479
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1029
LABELV $1479
line 2079
;2079:				cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 2081
;2080:			// add lightning bolt
;2081:			if ( cg.time - cent->muzzleFlashTime < 100 && !cent->pe.railgunFlash ) {
ADDRLP4 616
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 616
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 100
GEI4 $1480
ADDRLP4 616
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1480
line 2083
;2082:				// leilei - don't prolong the lightning
;2083:				CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 2084
;2084:			}
LABELV $1480
line 2087
;2085:
;2086:			// add rail trail
;2087:			CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 2089
;2088:
;2089:			if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 624
CNSTF4 0
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 624
INDIRF4
NEF4 $1488
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 624
INDIRF4
NEF4 $1488
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 624
INDIRF4
EQF4 $1029
LABELV $1488
line 2090
;2090:				trap_R_AddLightToScene( parent->origin, 200, weapon->flashDlightColor[0] * fadeout,
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTF4 1128792064
ARGF4
ADDRLP4 632
ADDRLP4 604
INDIRF4
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 632
INDIRF4
MULF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2092
;2091:										weapon->flashDlightColor[1]  * fadeout, weapon->flashDlightColor[2]  * fadeout);
;2092:			}
line 2093
;2093:		}
line 2094
;2094:		return;
ADDRGP4 $1029
JUMPV
LABELV $1362
line 2099
;2095:		
;2096:	}
;2097:	
;2098:	// q3 - don't touch this!
;2099:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 404
INDIRI4
CNSTI4 6
EQI4 $1492
ADDRLP4 404
INDIRI4
CNSTI4 1
EQI4 $1492
ADDRLP4 404
INDIRI4
CNSTI4 10
NEI4 $1489
LABELV $1492
ADDRLP4 420
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1489
line 2100
;2100:			&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) {
line 2102
;2101:		// continuous flash
;2102:	}
ADDRGP4 $1490
JUMPV
LABELV $1489
line 2103
;2103:	else {
line 2105
;2104:		// impulse flash
;2105:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 608
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 608
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $1493
ADDRLP4 608
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1493
line 2106
;2106:			return;
ADDRGP4 $1029
JUMPV
LABELV $1493
line 2108
;2107:		}
;2108:	}
LABELV $1490
line 2110
;2109:
;2110:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2111
;2111:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2112
;2112:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2113
;2113:	flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2115
;2114:
;2115:	flash.hModel = weapon->flashModel;
ADDRLP4 176+8
ADDRLP4 352
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 2116
;2116:	if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1500
line 2117
;2117:		return;
ADDRGP4 $1029
JUMPV
LABELV $1500
line 2119
;2118:	}
;2119:	angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 2120
;2120:	angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 2121
;2121:	angles[ROLL] = crandom() * 10;
ADDRLP4 608
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 408+8
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 608
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 2122
;2122:	AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2125
;2123:
;2124:	// colorize the railgun blast
;2125:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 404
INDIRI4
CNSTI4 7
NEI4 $1506
line 2128
;2126:		clientInfo_t	*ci;
;2127:
;2128:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 612
CNSTI4 2120
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 2129
;2129:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 620
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 624
CNSTF4 1325400064
ASGNF4
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
LTF4 $1511
ADDRLP4 616
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1512
JUMPV
LABELV $1511
ADDRLP4 616
ADDRLP4 620
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1512
ADDRLP4 176+116
ADDRLP4 616
INDIRU4
CVUU1 4
ASGNU1
line 2130
;2130:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 632
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 636
CNSTF4 1325400064
ASGNF4
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
LTF4 $1516
ADDRLP4 628
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1517
JUMPV
LABELV $1516
ADDRLP4 628
ADDRLP4 632
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1517
ADDRLP4 176+116+1
ADDRLP4 628
INDIRU4
CVUU1 4
ASGNU1
line 2131
;2131:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 644
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 648
CNSTF4 1325400064
ASGNF4
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
LTF4 $1521
ADDRLP4 640
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1522
JUMPV
LABELV $1521
ADDRLP4 640
ADDRLP4 644
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1522
ADDRLP4 176+116+2
ADDRLP4 640
INDIRU4
CVUU1 4
ASGNU1
line 2132
;2132:	}
LABELV $1506
line 2133
;2133:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 352
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1009
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2136
;2134:
;2135:	// leilei - allow the flash to go away 
;2136:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2138
;2137:
;2138:	if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1529
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1529
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $1523
LABELV $1529
line 2139
;2139:			cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 2141
;2140:		// add lightning bolt
;2141:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 420
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 2144
;2142:
;2143:		// add rail trail
;2144:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 2146
;2145:
;2146:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 616
CNSTF4 0
ASGNF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1535
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1535
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
EQF4 $1532
LABELV $1535
line 2147
;2147:			trap_R_AddLightToScene( flash.origin, 300 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 620
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 176+68
ARGP4
ADDRLP4 620
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
CVIF4 4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 352
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2149
;2148:									weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;2149:		}
LABELV $1532
line 2150
;2150:	}
LABELV $1523
line 2151
;2151:}
LABELV $1029
endproc CG_AddPlayerWeapon 656 28
export CG_AddViewWeapon
proc CG_AddViewWeapon 220 16
line 2161
;2152:
;2153:/*
;2154:==============
;2155:CG_AddViewWeapon
;2156:
;2157:Add the weapon, and flash for the player's view
;2158:==============
;2159:*/
;2160:void CG_AddViewWeapon( playerState_t *ps )
;2161:{
line 2169
;2162:	refEntity_t	hand;
;2163:	centity_t	*cent;
;2164:	clientInfo_t	*ci;
;2165:	float		fovOffset;
;2166:	vec3_t		angles;
;2167:	weaponInfo_t	*weapon;
;2168:
;2169:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1538
line 2170
;2170:		return;
ADDRGP4 $1537
JUMPV
LABELV $1538
line 2173
;2171:	}
;2172:
;2173:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1540
line 2174
;2174:		return;
ADDRGP4 $1537
JUMPV
LABELV $1540
line 2179
;2175:	}
;2176:
;2177:	// no gun if in third person view or a camera is active
;2178:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;2179:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $1542
line 2180
;2180:		return;
ADDRGP4 $1537
JUMPV
LABELV $1542
line 2185
;2181:	}
;2182:
;2183:
;2184:	// allow the gun to be completely removed
;2185:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $1545
line 2188
;2186:		vec3_t		origin;
;2187:
;2188:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1537
line 2190
;2189:			// special hack for lightning gun...
;2190:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 204
ADDRGP4 cg+109252+24
INDIRB
ASGNB 12
line 2191
;2191:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 216
CNSTF4 3238002688
ASGNF4
ADDRLP4 204
ADDRLP4 204
INDIRF4
ADDRLP4 216
INDIRF4
ADDRGP4 cg+109252+36+24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204+4
ADDRLP4 204+4
INDIRF4
ADDRLP4 216
INDIRF4
ADDRGP4 cg+109252+36+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204+8
ADDRLP4 204+8
INDIRF4
CNSTF4 3238002688
ADDRGP4 cg+109252+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2192
;2192:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
CNSTI4 936
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 204
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 2193
;2193:		}
line 2194
;2194:		return;
ADDRGP4 $1537
JUMPV
LABELV $1545
line 2198
;2195:	}
;2196:
;2197:	// don't draw if testing a gun model
;2198:	if ( cg.testGun ) {
ADDRGP4 cg+125624
INDIRI4
CNSTI4 0
EQI4 $1569
line 2199
;2199:		return;
ADDRGP4 $1537
JUMPV
LABELV $1569
line 2203
;2200:	}
;2201:
;2202:	// drop gun lower at higher fov
;2203:	if ( cg_fov.integer > 90 ) {
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
LEI4 $1572
line 2204
;2204:		fovOffset = -0.2 * ( cg_fov.integer - 90 );
ADDRLP4 176
CNSTF4 3192704205
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
SUBI4
CVIF4 4
MULF4
ASGNF4
line 2205
;2205:	}
ADDRGP4 $1573
JUMPV
LABELV $1572
line 2206
;2206:	else {
line 2207
;2207:		fovOffset = 0;
ADDRLP4 176
CNSTF4 0
ASGNF4
line 2208
;2208:	}
LABELV $1573
line 2210
;2209:
;2210:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 180
ADDRGP4 cg+108104
ASGNP4
line 2211
;2211:	CG_RegisterWeapon( ps->weapon );
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2212
;2212:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 196
CNSTI4 172
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2214
;2213:
;2214:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2217
;2215:
;2216:	// set up gun position
;2217:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 184
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 2219
;2218:
;2219:	VectorMA( hand.origin, cg_gun_x.value, cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109252+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109252+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109252+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2220
;2220:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109252+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109252+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109252+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2221
;2221:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109252+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109252+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109252+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 2223
;2222:
;2223:	AnglesToAxis( angles, hand.axis );
ADDRLP4 184
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2226
;2224:
;2225:	// map torso animations to weapon animations
;2226:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1648
line 2228
;2227:		// development tool
;2228:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 204
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 204
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 204
INDIRI4
ASGNI4
line 2229
;2229:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 2230
;2230:	}
ADDRGP4 $1649
JUMPV
LABELV $1648
line 2231
;2231:	else {
line 2233
;2232:		// get clientinfo for animation map
;2233:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 200
CNSTI4 2120
ADDRLP4 180
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+41152
ADDP4
ASGNP4
line 2234
;2234:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 204
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 204
INDIRI4
ASGNI4
line 2235
;2235:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 500
ADDP4
INDIRI4
ARGI4
ADDRLP4 208
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 208
INDIRI4
ASGNI4
line 2236
;2236:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 180
INDIRP4
CNSTI4 516
ADDP4
INDIRF4
ASGNF4
line 2237
;2237:	}
LABELV $1649
line 2239
;2238:
;2239:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 196
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2240
;2240:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 2243
;2241:
;2242:	// add everything onto the hand
;2243:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM] );
ADDRLP4 0
ARGP4
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
ADDRLP4 204
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 2244
;2244:}
LABELV $1537
endproc CG_AddViewWeapon 220 16
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 40 12
line 2260
;2245:
;2246:/*
;2247:==============================================================================
;2248:
;2249:WEAPON SELECTION
;2250:
;2251:==============================================================================
;2252:*/
;2253:
;2254:/*
;2255:===================
;2256:CG_DrawWeaponSelect
;2257:===================
;2258:*/
;2259:void CG_DrawWeaponSelect( void )
;2260:{
line 2270
;2261:	int		i;
;2262:	int		bits;
;2263:	int		count;
;2264:	float		*color;
;2265:	vec4_t		realColor;
;2266:
;2267:
;2268:
;2269:	// don't display if dead
;2270:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
GTI4 $1663
line 2271
;2271:		return;
ADDRGP4 $1662
JUMPV
LABELV $1663
line 2274
;2272:	}
;2273:
;2274:	color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
ADDRGP4 cg+125268
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 32
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
ASGNP4
line 2277
;2275:
;2276:	//Elimination: Always show weapon bar
;2277:	if(cg_alwaysWeaponBar.integer) {
ADDRGP4 cg_alwaysWeaponBar+12
INDIRI4
CNSTI4 0
EQI4 $1668
line 2278
;2278:		realColor[0] = 1.0;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 2279
;2279:		realColor[1] = 1.0;
ADDRLP4 16+4
CNSTF4 1065353216
ASGNF4
line 2280
;2280:		realColor[2] = 1.0;
ADDRLP4 16+8
CNSTF4 1065353216
ASGNF4
line 2281
;2281:		realColor[3] = 1.0;
ADDRLP4 16+12
CNSTF4 1065353216
ASGNF4
line 2282
;2282:		color = realColor;
ADDRLP4 12
ADDRLP4 16
ASGNP4
line 2283
;2283:	}
LABELV $1668
line 2285
;2284:
;2285:	if ( !color ) {
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1674
line 2286
;2286:		return;
ADDRGP4 $1662
JUMPV
LABELV $1674
line 2288
;2287:	}
;2288:	trap_R_SetColor( color );
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2291
;2289:
;2290:	// showing weapon select clears pickup item display, but not the blend blob
;2291:	cg.itemPickupTime = 0;
ADDRGP4 cg+125260
CNSTI4 0
ASGNI4
line 2294
;2292:
;2293:	// count the number of weapons owned
;2294:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 2295
;2295:	count = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2296
;2296:	for ( i = 1 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1678
line 2297
;2297:		if ( bits & ( 1 << i ) ) {
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1682
line 2298
;2298:			count++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2299
;2299:		}
LABELV $1682
line 2300
;2300:	}
LABELV $1679
line 2296
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1678
line 2302
;2301:
;2302:	switch(cg_weaponBarStyle.integer) {
ADDRLP4 36
ADDRGP4 cg_weaponBarStyle+12
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
LTI4 $1684
ADDRLP4 36
INDIRI4
CNSTI4 7
GTI4 $1684
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1695
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1695
address $1687
address $1688
address $1689
address $1690
address $1691
address $1692
address $1693
address $1694
code
LABELV $1687
line 2304
;2303:	case 0:
;2304:		CG_DrawWeaponBar0(count,bits);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawWeaponBar0
CALLV
pop
line 2305
;2305:		break;
ADDRGP4 $1685
JUMPV
LABELV $1688
line 2307
;2306:	case 1:
;2307:		CG_DrawWeaponBar1(count,bits);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawWeaponBar1
CALLV
pop
line 2308
;2308:		break;
ADDRGP4 $1685
JUMPV
LABELV $1689
line 2310
;2309:	case 2:
;2310:		CG_DrawWeaponBar2(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar2
CALLV
pop
line 2311
;2311:		break;
ADDRGP4 $1685
JUMPV
LABELV $1690
line 2313
;2312:	case 3:
;2313:		CG_DrawWeaponBar3(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar3
CALLV
pop
line 2314
;2314:		break;
ADDRGP4 $1685
JUMPV
LABELV $1691
line 2316
;2315:	case 4:
;2316:		CG_DrawWeaponBar4(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar4
CALLV
pop
line 2317
;2317:		break;
ADDRGP4 $1685
JUMPV
LABELV $1692
line 2319
;2318:	case 5:
;2319:		CG_DrawWeaponBar5(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar5
CALLV
pop
line 2320
;2320:		break;
ADDRGP4 $1685
JUMPV
LABELV $1693
line 2322
;2321:	case 6:
;2322:		CG_DrawWeaponBar6(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar6
CALLV
pop
line 2323
;2323:		break;
ADDRGP4 $1685
JUMPV
LABELV $1694
line 2325
;2324:	case 7:
;2325:		CG_DrawWeaponBar7(count,bits, color);
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_DrawWeaponBar7
CALLV
pop
line 2326
;2326:		break;
LABELV $1684
LABELV $1685
line 2328
;2327:	}
;2328:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2329
;2329:	return;
LABELV $1662
endproc CG_DrawWeaponSelect 40 12
export CG_DrawWeaponBar0
proc CG_DrawWeaponBar0 24 20
line 2339
;2330:}
;2331:
;2332:/*
;2333:===============
;2334:CG_DrawWeaponBar0
;2335:===============
;2336:*/
;2337:
;2338:void CG_DrawWeaponBar0(int count, int bits)
;2339:{
line 2341
;2340:
;2341:	int y = 380;
ADDRLP4 8
CNSTI4 380
ASGNI4
line 2342
;2342:	int x = 320 - count * 20;
ADDRLP4 4
CNSTI4 320
CNSTI4 20
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 2345
;2343:	int i;
;2344:
;2345:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1697
line 2347
;2346:		//Sago: Do mad change of grapple placement:
;2347:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1701
line 2348
;2348:			continue;
ADDRGP4 $1698
JUMPV
LABELV $1701
line 2349
;2349:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1703
line 2350
;2350:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1703
line 2351
;2351:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1705
line 2352
;2352:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1698
line 2353
;2353:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2354
;2354:			continue;
ADDRGP4 $1698
JUMPV
LABELV $1705
line 2357
;2355:		}
;2356:
;2357:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2359
;2358:		// draw weapon icon
;2359:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
CNSTF4 1107296256
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2362
;2360:
;2361:		// draw selection marker
;2362:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1710
line 2363
;2363:			CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader );
ADDRLP4 16
CNSTI4 4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 20
CNSTF4 1109393408
ASGNF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 cgs+180268+276
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2364
;2364:		}
LABELV $1710
line 2367
;2365:
;2366:		// no ammo cross on top
;2367:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1715
line 2368
;2368:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 cgs+180268+336
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2369
;2369:		}
LABELV $1715
line 2371
;2370:
;2371:		x += 40;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 2373
;2372:		//Sago: Undo mad change of weapons
;2373:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1720
line 2374
;2374:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1720
line 2375
;2375:	}
LABELV $1698
line 2345
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1697
line 2376
;2376:}
LABELV $1696
endproc CG_DrawWeaponBar0 24 20
export CG_DrawWeaponBar1
proc CG_DrawWeaponBar1 96 20
line 2385
;2377:
;2378:/*
;2379:===============
;2380:CG_DrawWeaponBar1
;2381:===============
;2382:*/
;2383:
;2384:void CG_DrawWeaponBar1(int count, int bits)
;2385:{
line 2387
;2386:
;2387:	int y = 380;
ADDRLP4 12
CNSTI4 380
ASGNI4
line 2388
;2388:	int x = 320 - count * 20;
ADDRLP4 8
CNSTI4 320
CNSTI4 20
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 2397
;2389:	int i;
;2390:	int ammo;
;2391:	int br;
;2392:	int max;
;2393:	float red[4];
;2394:	float yellow[4];
;2395:	float green[4];
;2396:
;2397:	red[0] = 1.0f;
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
line 2398
;2398:	red[1] = 0;
ADDRLP4 24+4
CNSTF4 0
ASGNF4
line 2399
;2399:	red[2] = 0;
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 2400
;2400:	red[3] = 1.0f;
ADDRLP4 24+12
CNSTF4 1065353216
ASGNF4
line 2402
;2401:
;2402:	yellow[0] = 1.0f;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
line 2403
;2403:	yellow[1] = 0.6f;
ADDRLP4 40+4
CNSTF4 1058642330
ASGNF4
line 2404
;2404:	yellow[2] = 0;
ADDRLP4 40+8
CNSTF4 0
ASGNF4
line 2405
;2405:	yellow[3] = 1.0f;
ADDRLP4 40+12
CNSTF4 1065353216
ASGNF4
line 2407
;2406:
;2407:	green[0] = 0;
ADDRLP4 56
CNSTF4 0
ASGNF4
line 2408
;2408:	green[1] = 1.0f;
ADDRLP4 56+4
CNSTF4 1065353216
ASGNF4
line 2409
;2409:	green[2] = 0;
ADDRLP4 56+8
CNSTF4 0
ASGNF4
line 2410
;2410:	green[3] = 1.0f;
ADDRLP4 56+12
CNSTF4 1065353216
ASGNF4
line 2412
;2411:
;2412:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1732
line 2414
;2413:		//Sago: Do mad change of grapple placement:
;2414:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1736
line 2415
;2415:			continue;
ADDRGP4 $1733
JUMPV
LABELV $1736
line 2416
;2416:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1738
line 2417
;2417:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1738
line 2418
;2418:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1740
line 2419
;2419:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1733
line 2420
;2420:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2421
;2421:			continue;
ADDRGP4 $1733
JUMPV
LABELV $1740
line 2424
;2422:		}
;2423:
;2424:		ammo=cg.snap->ps.ammo[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2426
;2425:
;2426:		switch(i) {
ADDRLP4 76
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 76
INDIRI4
LTI4 $1745
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1745
ADDRLP4 0
INDIRI4
ADDRLP4 76
INDIRI4
LSHI4
ADDRGP4 $1758-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1758
address $1747
address $1748
address $1749
address $1750
address $1751
address $1752
address $1753
address $1754
address $1745
address $1755
address $1756
address $1757
code
LABELV $1747
line 2428
;2427:		case WP_MACHINEGUN:
;2428:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 2429
;2429:			break;
ADDRGP4 $1746
JUMPV
LABELV $1748
line 2431
;2430:		case WP_SHOTGUN:
;2431:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2432
;2432:			break;
ADDRGP4 $1746
JUMPV
LABELV $1749
line 2434
;2433:		case WP_GRENADE_LAUNCHER:
;2434:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2435
;2435:			break;
ADDRGP4 $1746
JUMPV
LABELV $1750
line 2437
;2436:		case WP_ROCKET_LAUNCHER:
;2437:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2438
;2438:			break;
ADDRGP4 $1746
JUMPV
LABELV $1751
line 2440
;2439:		case WP_LIGHTNING:
;2440:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 2441
;2441:			break;
ADDRGP4 $1746
JUMPV
LABELV $1752
line 2443
;2442:		case WP_RAILGUN:
;2443:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2444
;2444:			break;
ADDRGP4 $1746
JUMPV
LABELV $1753
line 2446
;2445:		case WP_PLASMAGUN:
;2446:			max = 50;
ADDRLP4 16
CNSTI4 50
ASGNI4
line 2447
;2447:			break;
ADDRGP4 $1746
JUMPV
LABELV $1754
line 2449
;2448:		case WP_BFG:
;2449:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2450
;2450:			break;
ADDRGP4 $1746
JUMPV
LABELV $1755
line 2452
;2451:		case WP_NAILGUN:
;2452:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2453
;2453:			break;
ADDRGP4 $1746
JUMPV
LABELV $1756
line 2455
;2454:		case WP_PROX_LAUNCHER:
;2455:			max = 5;
ADDRLP4 16
CNSTI4 5
ASGNI4
line 2456
;2456:			break;
ADDRGP4 $1746
JUMPV
LABELV $1757
line 2458
;2457:		case WP_CHAINGUN:
;2458:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 2459
;2459:			break;
ADDRGP4 $1746
JUMPV
LABELV $1745
line 2461
;2460:		default:
;2461:			max = 1;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 2462
;2462:			break;
LABELV $1746
line 2465
;2463:		}
;2464:
;2465:		ammo = (ammo*100)/max;
ADDRLP4 4
CNSTI4 100
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 16
INDIRI4
DIVI4
ASGNI4
line 2466
;2466:		if(ammo >=100)
ADDRLP4 4
INDIRI4
CNSTI4 100
LTI4 $1760
line 2467
;2467:			ammo=100;
ADDRLP4 4
CNSTI4 100
ASGNI4
LABELV $1760
line 2469
;2468:
;2469:		br=ammo*32/100;
ADDRLP4 20
ADDRLP4 4
INDIRI4
CNSTI4 5
LSHI4
CNSTI4 100
DIVI4
ASGNI4
line 2471
;2470:
;2471:		if(i!=WP_GAUNTLET && i!=WP_GRAPPLING_HOOK) {
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $1762
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $1762
line 2472
;2472:			if(ammo <= 20)
ADDRLP4 4
INDIRI4
CNSTI4 20
GTI4 $1764
line 2473
;2473:				CG_FillRect( x, y+38, br,4, red);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 38
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 24
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1764
line 2474
;2474:			if(ammo > 20 && ammo <= 50)
ADDRLP4 4
INDIRI4
CNSTI4 20
LEI4 $1766
ADDRLP4 4
INDIRI4
CNSTI4 50
GTI4 $1766
line 2475
;2475:				CG_FillRect( x, y+38, br, 4, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 38
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 40
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1766
line 2476
;2476:			if(ammo > 50)
ADDRLP4 4
INDIRI4
CNSTI4 50
LEI4 $1768
line 2477
;2477:				CG_FillRect( x, y+38, br, 4, green);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 38
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 56
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1768
line 2478
;2478:		}
LABELV $1762
line 2480
;2479:
;2480:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2482
;2481:		// draw weapon icon
;2482:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 84
CNSTF4 1107296256
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2485
;2483:
;2484:		// draw selection marker
;2485:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1771
line 2486
;2486:			CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader );
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 88
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
ADDRLP4 88
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 92
CNSTF4 1109393408
ASGNF4
ADDRLP4 92
INDIRF4
ARGF4
ADDRLP4 92
INDIRF4
ARGF4
ADDRGP4 cgs+180268+276
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2487
;2487:		}
LABELV $1771
line 2490
;2488:
;2489:		// no ammo cross on top
;2490:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1776
line 2491
;2491:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 88
CNSTF4 1107296256
ASGNF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRGP4 cgs+180268+336
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2492
;2492:		}
LABELV $1776
line 2494
;2493:
;2494:		x += 40;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 2496
;2495:		//Sago: Undo mad change of weapons
;2496:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1781
line 2497
;2497:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1781
line 2498
;2498:	}
LABELV $1733
line 2412
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1732
line 2499
;2499:}
LABELV $1722
endproc CG_DrawWeaponBar1 96 20
export CG_DrawWeaponBar2
proc CG_DrawWeaponBar2 80 24
line 2508
;2500:
;2501:/*
;2502:===============
;2503:CG_DrawWeaponBar2
;2504:===============
;2505:*/
;2506:
;2507:void CG_DrawWeaponBar2(int count, int bits, float *color)
;2508:{
line 2510
;2509:
;2510:	int y = 200 + count * 12;
ADDRLP4 4
CNSTI4 12
ADDRFP4 0
INDIRI4
MULI4
CNSTI4 200
ADDI4
ASGNI4
line 2511
;2511:	int x = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2519
;2512:	int i;
;2513:	int w;
;2514:	char *s;
;2515:	float red[4];
;2516:	float yellow[4];
;2517:	float blue[4];
;2518:
;2519:	red[0] = 1.0f;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 2520
;2520:	red[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 2521
;2521:	red[2] = 0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 2522
;2522:	red[3] = 0.4f;
ADDRLP4 20+12
CNSTF4 1053609165
ASGNF4
line 2524
;2523:
;2524:	yellow[0] = 1.0f;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
line 2525
;2525:	yellow[1] = 1.0f;
ADDRLP4 36+4
CNSTF4 1065353216
ASGNF4
line 2526
;2526:	yellow[2] = 0;
ADDRLP4 36+8
CNSTF4 0
ASGNF4
line 2527
;2527:	yellow[3] = 1.0f;
ADDRLP4 36+12
CNSTF4 1065353216
ASGNF4
line 2529
;2528:
;2529:	blue[0] = 0;
ADDRLP4 52
CNSTF4 0
ASGNF4
line 2530
;2530:	blue[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 2531
;2531:	blue[2] = 1.0f;
ADDRLP4 52+8
CNSTF4 1065353216
ASGNF4
line 2532
;2532:	blue[3] = 0.4f;
ADDRLP4 52+12
CNSTF4 1053609165
ASGNF4
line 2534
;2533:
;2534:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1793
line 2536
;2535:		//Sago: Do mad change of grapple placement:
;2536:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1797
line 2537
;2537:			continue;
ADDRGP4 $1794
JUMPV
LABELV $1797
line 2538
;2538:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1799
line 2539
;2539:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1799
line 2540
;2540:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1801
line 2541
;2541:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1794
line 2542
;2542:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2543
;2543:			continue;
ADDRGP4 $1794
JUMPV
LABELV $1801
line 2546
;2544:		}
;2545:
;2546:		if(cg.snap->ps.ammo[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1805
line 2547
;2547:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1808
line 2548
;2548:				CG_FillRect( x, y, 50, 24, blue );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 52
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2549
;2549:				CG_DrawRect( x, y, 50, 24, 2, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2550
;2550:			}
ADDRGP4 $1806
JUMPV
LABELV $1808
line 2551
;2551:			else {
line 2552
;2552:				CG_FillRect( x, y,50, 24, blue );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 52
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2553
;2553:			}
line 2554
;2554:		}
ADDRGP4 $1806
JUMPV
LABELV $1805
line 2555
;2555:		else {
line 2556
;2556:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1811
line 2557
;2557:				CG_FillRect( x, y, 50, 24, red );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 20
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2558
;2558:				CG_DrawRect( x, y, 50, 24, 2, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2559
;2559:			}
ADDRGP4 $1812
JUMPV
LABELV $1811
line 2560
;2560:			else {
line 2561
;2561:				CG_FillRect( x, y,50, 24, red );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 20
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2562
;2562:			}
LABELV $1812
line 2563
;2563:		}
LABELV $1806
line 2565
;2564:
;2565:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2567
;2566:		// draw weapon icon
;2567:		CG_DrawPic( x+2, y+4, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 68
CNSTF4 1098907648
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2570
;2568:
;2569:		/** Draw Weapon Ammo **/
;2570:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1815
line 2571
;2571:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 72
INDIRP4
ASGNP4
line 2572
;2572:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 76
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 2573
;2573:			CG_DrawSmallStringColor(x - w/2 + 32, y+4, s, color);
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 2574
;2574:		}
LABELV $1815
line 2576
;2575:
;2576:		y -= 24;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 24
SUBI4
ASGNI4
line 2578
;2577:		//Sago: Undo mad change of weapons
;2578:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1820
line 2579
;2579:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1820
line 2580
;2580:	}
LABELV $1794
line 2534
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1793
line 2581
;2581:}
LABELV $1783
endproc CG_DrawWeaponBar2 80 24
export CG_DrawWeaponBar3
proc CG_DrawWeaponBar3 124 24
line 2590
;2582:
;2583:/*
;2584:===============
;2585:CG_DrawWeaponBar3
;2586:===============
;2587:*/
;2588:
;2589:void CG_DrawWeaponBar3(int count, int bits, float *color)
;2590:{
line 2592
;2591:
;2592:	int y = 200 + count * 12;
ADDRLP4 8
CNSTI4 12
ADDRFP4 0
INDIRI4
MULI4
CNSTI4 200
ADDI4
ASGNI4
line 2593
;2593:	int x = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 2605
;2594:	int i;
;2595:	int ammo;
;2596:	int max;
;2597:	int br;
;2598:	int w;
;2599:	char *s;
;2600:	float red[4];
;2601:	float yellow[4];
;2602:	float green[4];
;2603:	float blue[4];
;2604:
;2605:	red[0] = 1.0f;
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
line 2606
;2606:	red[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 2607
;2607:	red[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 2608
;2608:	red[3] = 0.4f;
ADDRLP4 28+12
CNSTF4 1053609165
ASGNF4
line 2610
;2609:
;2610:	yellow[0] = 1.0f;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 2611
;2611:	yellow[1] = 1.0f;
ADDRLP4 44+4
CNSTF4 1065353216
ASGNF4
line 2612
;2612:	yellow[2] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 2613
;2613:	yellow[3] = 1.0f;
ADDRLP4 44+12
CNSTF4 1065353216
ASGNF4
line 2615
;2614:
;2615:	green[0] = 0;
ADDRLP4 80
CNSTF4 0
ASGNF4
line 2616
;2616:	green[1] = 1.0f;
ADDRLP4 80+4
CNSTF4 1065353216
ASGNF4
line 2617
;2617:	green[2] = 0;
ADDRLP4 80+8
CNSTF4 0
ASGNF4
line 2618
;2618:	green[3] = 1.0f;
ADDRLP4 80+12
CNSTF4 1065353216
ASGNF4
line 2620
;2619:
;2620:	blue[0] = 0;
ADDRLP4 64
CNSTF4 0
ASGNF4
line 2621
;2621:	blue[1] = 0;
ADDRLP4 64+4
CNSTF4 0
ASGNF4
line 2622
;2622:	blue[2] = 1.0f;
ADDRLP4 64+8
CNSTF4 1065353216
ASGNF4
line 2623
;2623:	blue[3] = 0.4f;
ADDRLP4 64+12
CNSTF4 1053609165
ASGNF4
line 2625
;2624:
;2625:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1835
line 2627
;2626:		//Sago: Do mad change of grapple placement:
;2627:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1839
line 2628
;2628:			continue;
ADDRGP4 $1836
JUMPV
LABELV $1839
line 2629
;2629:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1841
line 2630
;2630:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1841
line 2631
;2631:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1843
line 2632
;2632:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1836
line 2633
;2633:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2634
;2634:			continue;
ADDRGP4 $1836
JUMPV
LABELV $1843
line 2637
;2635:		}
;2636:
;2637:		ammo=cg.snap->ps.ammo[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2639
;2638:
;2639:		switch(i) {
ADDRLP4 100
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
LTI4 $1848
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1848
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
LSHI4
ADDRGP4 $1861-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1861
address $1850
address $1851
address $1852
address $1853
address $1854
address $1855
address $1856
address $1857
address $1848
address $1858
address $1859
address $1860
code
LABELV $1850
line 2641
;2640:		case WP_MACHINEGUN:
;2641:			max = 100;
ADDRLP4 20
CNSTI4 100
ASGNI4
line 2642
;2642:			break;
ADDRGP4 $1849
JUMPV
LABELV $1851
line 2644
;2643:		case WP_SHOTGUN:
;2644:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2645
;2645:			break;
ADDRGP4 $1849
JUMPV
LABELV $1852
line 2647
;2646:		case WP_GRENADE_LAUNCHER:
;2647:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2648
;2648:			break;
ADDRGP4 $1849
JUMPV
LABELV $1853
line 2650
;2649:		case WP_ROCKET_LAUNCHER:
;2650:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2651
;2651:			break;
ADDRGP4 $1849
JUMPV
LABELV $1854
line 2653
;2652:		case WP_LIGHTNING:
;2653:			max = 100;
ADDRLP4 20
CNSTI4 100
ASGNI4
line 2654
;2654:			break;
ADDRGP4 $1849
JUMPV
LABELV $1855
line 2656
;2655:		case WP_RAILGUN:
;2656:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2657
;2657:			break;
ADDRGP4 $1849
JUMPV
LABELV $1856
line 2659
;2658:		case WP_PLASMAGUN:
;2659:			max = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 2660
;2660:			break;
ADDRGP4 $1849
JUMPV
LABELV $1857
line 2662
;2661:		case WP_BFG:
;2662:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2663
;2663:			break;
ADDRGP4 $1849
JUMPV
LABELV $1858
line 2665
;2664:		case WP_NAILGUN:
;2665:			max = 10;
ADDRLP4 20
CNSTI4 10
ASGNI4
line 2666
;2666:			break;
ADDRGP4 $1849
JUMPV
LABELV $1859
line 2668
;2667:		case WP_PROX_LAUNCHER:
;2668:			max = 5;
ADDRLP4 20
CNSTI4 5
ASGNI4
line 2669
;2669:			break;
ADDRGP4 $1849
JUMPV
LABELV $1860
line 2671
;2670:		case WP_CHAINGUN:
;2671:			max = 100;
ADDRLP4 20
CNSTI4 100
ASGNI4
line 2672
;2672:			break;
ADDRGP4 $1849
JUMPV
LABELV $1848
line 2674
;2673:		default:
;2674:			max = 1;
ADDRLP4 20
CNSTI4 1
ASGNI4
line 2675
;2675:			break;
LABELV $1849
line 2678
;2676:		}
;2677:
;2678:		ammo = (ammo*100)/max;
ADDRLP4 4
CNSTI4 100
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 20
INDIRI4
DIVI4
ASGNI4
line 2679
;2679:		if(ammo >=100)
ADDRLP4 4
INDIRI4
CNSTI4 100
LTI4 $1863
line 2680
;2680:			ammo=100;
ADDRLP4 4
CNSTI4 100
ASGNI4
LABELV $1863
line 2682
;2681:
;2682:		br=ammo*20/100;
ADDRLP4 16
CNSTI4 20
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 100
DIVI4
ASGNI4
line 2684
;2683:
;2684:		if(i!=WP_GAUNTLET && i!=WP_GRAPPLING_HOOK) {
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $1865
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $1865
line 2685
;2685:			if(ammo <= 20)
ADDRLP4 4
INDIRI4
CNSTI4 20
GTI4 $1867
line 2686
;2686:				CG_FillRect( 51, y+2+20-br, 4,br, red);
CNSTF4 1112276992
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CNSTI4 20
ADDI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1867
line 2687
;2687:			if(ammo > 20 && ammo <= 50)
ADDRLP4 4
INDIRI4
CNSTI4 20
LEI4 $1869
ADDRLP4 4
INDIRI4
CNSTI4 50
GTI4 $1869
line 2688
;2688:				CG_FillRect( 51, y+2+20-br, 4,br, yellow);
CNSTF4 1112276992
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CNSTI4 20
ADDI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1869
line 2689
;2689:			if(ammo > 50)
ADDRLP4 4
INDIRI4
CNSTI4 50
LEI4 $1871
line 2690
;2690:				CG_FillRect( 51, y+2+20-br, 4,br, green);
CNSTF4 1112276992
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CNSTI4 20
ADDI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 80
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $1871
line 2691
;2691:		}
LABELV $1865
line 2693
;2692:
;2693:		if(cg.snap->ps.ammo[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1873
line 2694
;2694:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1876
line 2695
;2695:				CG_FillRect( x, y, 50, 24, blue );
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 64
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2696
;2696:				CG_DrawRect( x, y, 50, 24, 2, yellow);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2697
;2697:			}
ADDRGP4 $1874
JUMPV
LABELV $1876
line 2698
;2698:			else {
line 2699
;2699:				CG_FillRect( x, y,50, 24, blue );
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 64
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2700
;2700:			}
line 2701
;2701:		}
ADDRGP4 $1874
JUMPV
LABELV $1873
line 2702
;2702:		else {
line 2703
;2703:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1879
line 2704
;2704:				CG_FillRect( x, y, 50, 24, red );
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2705
;2705:				CG_DrawRect( x, y, 50, 24, 2, yellow);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2706
;2706:			}
ADDRGP4 $1880
JUMPV
LABELV $1879
line 2707
;2707:			else {
line 2708
;2708:				CG_FillRect( x, y,50, 24, red );
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2709
;2709:			}
LABELV $1880
line 2710
;2710:		}
LABELV $1874
line 2711
;2711:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2713
;2712:		// draw weapon icon
;2713:		CG_DrawPic( x+2, y+4, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 12
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 108
CNSTF4 1098907648
ASGNF4
ADDRLP4 108
INDIRF4
ARGF4
ADDRLP4 108
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2716
;2714:
;2715:		/** Draw Weapon Ammo **/
;2716:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1883
line 2717
;2717:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 112
INDIRP4
ASGNP4
line 2718
;2718:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 116
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 2719
;2719:			CG_DrawSmallStringColor(x - w/2 + 32, y+4, s, color);
ADDRLP4 12
INDIRI4
ADDRLP4 60
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 2720
;2720:		}
LABELV $1883
line 2722
;2721:
;2722:		y -= 24;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 24
SUBI4
ASGNI4
line 2724
;2723:		//Sago: Undo mad change of weapons
;2724:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1887
line 2725
;2725:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1887
line 2726
;2726:	}
LABELV $1836
line 2625
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1835
line 2727
;2727:}
LABELV $1822
endproc CG_DrawWeaponBar3 124 24
export CG_DrawWeaponBar4
proc CG_DrawWeaponBar4 88 24
line 2736
;2728:
;2729:/*
;2730:===============
;2731:CG_DrawWeaponBar4
;2732:===============
;2733:*/
;2734:
;2735:void CG_DrawWeaponBar4(int count, int bits, float *color)
;2736:{
line 2738
;2737:
;2738:	int y = 200 + count * 12;
ADDRLP4 8
CNSTI4 12
ADDRFP4 0
INDIRI4
MULI4
CNSTI4 200
ADDI4
ASGNI4
line 2739
;2739:	int x = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 2748
;2740:	int i;
;2741:	float ammo;
;2742:	int max;
;2743:	int w;
;2744:	char *s;
;2745:	float boxColor[4];
;2746:	float yellow[4];
;2747:
;2748:	boxColor[1]=0;
ADDRLP4 12+4
CNSTF4 0
ASGNF4
line 2749
;2749:	boxColor[3]=0.4f;
ADDRLP4 12+12
CNSTF4 1053609165
ASGNF4
line 2751
;2750:
;2751:	yellow[0] = 1.0f;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 2752
;2752:	yellow[1] = 1.0f;
ADDRLP4 44+4
CNSTF4 1065353216
ASGNF4
line 2753
;2753:	yellow[2] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 2754
;2754:	yellow[3] = 1.0f;
ADDRLP4 44+12
CNSTF4 1065353216
ASGNF4
line 2756
;2755:
;2756:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1895
line 2758
;2757:		//Sago: Do mad change of grapple placement:
;2758:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1899
line 2759
;2759:			continue;
ADDRGP4 $1896
JUMPV
LABELV $1899
line 2760
;2760:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1901
line 2761
;2761:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1901
line 2762
;2762:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1903
line 2763
;2763:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1896
line 2764
;2764:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2765
;2765:			continue;
ADDRGP4 $1896
JUMPV
LABELV $1903
line 2768
;2766:		}
;2767:
;2768:		ammo=cg.snap->ps.ammo[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 2770
;2769:
;2770:		switch(i) {
ADDRLP4 64
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 64
INDIRI4
LTI4 $1908
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1908
ADDRLP4 0
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
ADDRGP4 $1921-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1921
address $1910
address $1911
address $1912
address $1913
address $1914
address $1915
address $1916
address $1917
address $1908
address $1918
address $1919
address $1920
code
LABELV $1910
line 2772
;2771:		case WP_MACHINEGUN:
;2772:			max = 100;
ADDRLP4 32
CNSTI4 100
ASGNI4
line 2773
;2773:			break;
ADDRGP4 $1909
JUMPV
LABELV $1911
line 2775
;2774:		case WP_SHOTGUN:
;2775:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2776
;2776:			break;
ADDRGP4 $1909
JUMPV
LABELV $1912
line 2778
;2777:		case WP_GRENADE_LAUNCHER:
;2778:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2779
;2779:			break;
ADDRGP4 $1909
JUMPV
LABELV $1913
line 2781
;2780:		case WP_ROCKET_LAUNCHER:
;2781:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2782
;2782:			break;
ADDRGP4 $1909
JUMPV
LABELV $1914
line 2784
;2783:		case WP_LIGHTNING:
;2784:			max = 100;
ADDRLP4 32
CNSTI4 100
ASGNI4
line 2785
;2785:			break;
ADDRGP4 $1909
JUMPV
LABELV $1915
line 2787
;2786:		case WP_RAILGUN:
;2787:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2788
;2788:			break;
ADDRGP4 $1909
JUMPV
LABELV $1916
line 2790
;2789:		case WP_PLASMAGUN:
;2790:			max = 50;
ADDRLP4 32
CNSTI4 50
ASGNI4
line 2791
;2791:			break;
ADDRGP4 $1909
JUMPV
LABELV $1917
line 2793
;2792:		case WP_BFG:
;2793:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2794
;2794:			break;
ADDRGP4 $1909
JUMPV
LABELV $1918
line 2796
;2795:		case WP_NAILGUN:
;2796:			max = 10;
ADDRLP4 32
CNSTI4 10
ASGNI4
line 2797
;2797:			break;
ADDRGP4 $1909
JUMPV
LABELV $1919
line 2799
;2798:		case WP_PROX_LAUNCHER:
;2799:			max = 5;
ADDRLP4 32
CNSTI4 5
ASGNI4
line 2800
;2800:			break;
ADDRGP4 $1909
JUMPV
LABELV $1920
line 2802
;2801:		case WP_CHAINGUN:
;2802:			max = 100;
ADDRLP4 32
CNSTI4 100
ASGNI4
line 2803
;2803:			break;
ADDRGP4 $1909
JUMPV
LABELV $1908
line 2805
;2804:		default:
;2805:			max = 1;
ADDRLP4 32
CNSTI4 1
ASGNI4
line 2806
;2806:			break;
LABELV $1909
line 2809
;2807:		}
;2808:
;2809:		ammo = (ammo*100)/max;
ADDRLP4 4
CNSTF4 1120403456
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 32
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 2811
;2810:
;2811:		if((ammo >=100) || (ammo < 0))
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
GEF4 $1925
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $1923
LABELV $1925
line 2812
;2812:			ammo=100;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
LABELV $1923
line 2814
;2813:
;2814:		boxColor[2]=(ammo/100.0f)*1.0f;
ADDRLP4 12+8
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
DIVF4
MULF4
ASGNF4
line 2815
;2815:		boxColor[0]=1.0f-(ammo/100.0f)*1.0f;
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
ADDRLP4 72
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
DIVF4
MULF4
SUBF4
ASGNF4
line 2817
;2816:
;2817:		if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1927
line 2818
;2818:			CG_FillRect( x, y, 50, 24, boxColor );
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2819
;2819:			CG_DrawRect( x, y, 50, 24, 2, yellow);
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2820
;2820:		}
ADDRGP4 $1928
JUMPV
LABELV $1927
line 2821
;2821:		else {
line 2822
;2822:			CG_FillRect( x, y,50, 24, boxColor );
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2823
;2823:		}
LABELV $1928
line 2824
;2824:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2826
;2825:		// draw weapon icon
;2826:		CG_DrawPic( x+2, y+4, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 28
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 76
CNSTF4 1098907648
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2829
;2827:
;2828:		/** Draw Weapon Ammo **/
;2829:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1931
line 2830
;2830:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 80
INDIRP4
ASGNP4
line 2831
;2831:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 84
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 2832
;2832:			CG_DrawSmallStringColor(x - w/2 + 32, y+4, s, color);
ADDRLP4 28
INDIRI4
ADDRLP4 40
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 2833
;2833:		}
LABELV $1931
line 2835
;2834:
;2835:		y -= 24;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 24
SUBI4
ASGNI4
line 2837
;2836:		//Sago: Undo mad change of weapons
;2837:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1935
line 2838
;2838:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1935
line 2839
;2839:	}
LABELV $1896
line 2756
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1895
line 2840
;2840:}
LABELV $1889
endproc CG_DrawWeaponBar4 88 24
export CG_DrawWeaponBar5
proc CG_DrawWeaponBar5 80 24
line 2849
;2841:
;2842:/*
;2843:===============
;2844:CG_DrawWeaponBar5
;2845:===============
;2846:*/
;2847:
;2848:void CG_DrawWeaponBar5(int count, int bits, float *color)
;2849:{
line 2851
;2850:
;2851:	int y = 380;
ADDRLP4 8
CNSTI4 380
ASGNI4
line 2852
;2852:	int x = 320 - count * 15;
ADDRLP4 4
CNSTI4 320
CNSTI4 15
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 2860
;2853:	int i;
;2854:	int w;
;2855:	char *s;
;2856:	float red[4];
;2857:	float yellow[4];
;2858:	float blue[4];
;2859:
;2860:	red[0] = 1.0f;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 2861
;2861:	red[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 2862
;2862:	red[2] = 0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 2863
;2863:	red[3] = 0.4f;
ADDRLP4 20+12
CNSTF4 1053609165
ASGNF4
line 2865
;2864:
;2865:	yellow[0] = 1.0f;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
line 2866
;2866:	yellow[1] = 1.0f;
ADDRLP4 36+4
CNSTF4 1065353216
ASGNF4
line 2867
;2867:	yellow[2] = 0;
ADDRLP4 36+8
CNSTF4 0
ASGNF4
line 2868
;2868:	yellow[3] = 1.0f;
ADDRLP4 36+12
CNSTF4 1065353216
ASGNF4
line 2870
;2869:
;2870:	blue[0] = 0;
ADDRLP4 52
CNSTF4 0
ASGNF4
line 2871
;2871:	blue[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 2872
;2872:	blue[2] = 1.0f;
ADDRLP4 52+8
CNSTF4 1065353216
ASGNF4
line 2873
;2873:	blue[3] = 0.4f;
ADDRLP4 52+12
CNSTF4 1053609165
ASGNF4
line 2875
;2874:
;2875:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1947
line 2877
;2876:		//Sago: Do mad change of grapple placement:
;2877:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1951
line 2878
;2878:			continue;
ADDRGP4 $1948
JUMPV
LABELV $1951
line 2879
;2879:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1953
line 2880
;2880:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1953
line 2881
;2881:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1955
line 2882
;2882:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1948
line 2883
;2883:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2884
;2884:			continue;
ADDRGP4 $1948
JUMPV
LABELV $1955
line 2887
;2885:		}
;2886:
;2887:		if(cg.snap->ps.ammo[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1959
line 2888
;2888:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1962
line 2889
;2889:				CG_FillRect( x, y , 30 , 38, blue );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 52
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2890
;2890:				CG_DrawRect( x, y, 30 ,38 ,2, yellow);
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2891
;2891:			}
ADDRGP4 $1960
JUMPV
LABELV $1962
line 2892
;2892:			else {
line 2893
;2893:				CG_FillRect( x, y,30, 38, blue );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 52
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2894
;2894:			}
line 2895
;2895:		}
ADDRGP4 $1960
JUMPV
LABELV $1959
line 2896
;2896:		else {
line 2897
;2897:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $1965
line 2898
;2898:				CG_FillRect( x, y , 30 , 38, red );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 20
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2899
;2899:				CG_DrawRect( x , y, 30,38,2, yellow);
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 2900
;2900:			}
ADDRGP4 $1966
JUMPV
LABELV $1965
line 2901
;2901:			else {
line 2902
;2902:				CG_FillRect( x, y,30, 38, red );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 20
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2903
;2903:			}
LABELV $1966
line 2904
;2904:		}
LABELV $1960
line 2905
;2905:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2906
;2906:		CG_DrawPic( x+7, y+2, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 4
INDIRI4
CNSTI4 7
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 68
CNSTF4 1098907648
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2908
;2907:
;2908:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1969
line 2909
;2909:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 72
INDIRP4
ASGNP4
line 2910
;2910:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 76
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 2911
;2911:			CG_DrawSmallStringColor(x - w/2 + 15, y+20, s, color);
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 2912
;2912:		}
LABELV $1969
line 2914
;2913:
;2914:		x += 30;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 30
ADDI4
ASGNI4
line 2916
;2915:		//Sago: Undo mad change of weapons
;2916:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1973
line 2917
;2917:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1973
line 2918
;2918:	}
LABELV $1948
line 2875
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1947
line 2919
;2919:}
LABELV $1937
endproc CG_DrawWeaponBar5 80 24
export CG_DrawWeaponBar6
proc CG_DrawWeaponBar6 120 24
line 2928
;2920:
;2921:/*
;2922:===============
;2923:CG_DrawWeaponBar6
;2924:===============
;2925:*/
;2926:
;2927:void CG_DrawWeaponBar6(int count, int bits, float *color)
;2928:{
line 2930
;2929:
;2930:	int y = 380;
ADDRLP4 12
CNSTI4 380
ASGNI4
line 2931
;2931:	int x = 320 - count * 15;
ADDRLP4 8
CNSTI4 320
CNSTI4 15
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 2943
;2932:	int i;
;2933:	int ammo;
;2934:	int max;
;2935:	int br;
;2936:	int w;
;2937:	char *s;
;2938:	float red[4];
;2939:	float yellow[4];
;2940:	float green[4];
;2941:	float blue[4];
;2942:
;2943:	red[0] = 1.0f;
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
line 2944
;2944:	red[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 2945
;2945:	red[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 2946
;2946:	red[3] = 0.4f;
ADDRLP4 28+12
CNSTF4 1053609165
ASGNF4
line 2948
;2947:
;2948:	yellow[0] = 1.0f;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 2949
;2949:	yellow[1] = 1.0f;
ADDRLP4 44+4
CNSTF4 1065353216
ASGNF4
line 2950
;2950:	yellow[2] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 2951
;2951:	yellow[3] = 1.0f;
ADDRLP4 44+12
CNSTF4 1065353216
ASGNF4
line 2953
;2952:
;2953:	green[0] = 0;
ADDRLP4 80
CNSTF4 0
ASGNF4
line 2954
;2954:	green[1] = 1.0f;
ADDRLP4 80+4
CNSTF4 1065353216
ASGNF4
line 2955
;2955:	green[2] = 0;
ADDRLP4 80+8
CNSTF4 0
ASGNF4
line 2956
;2956:	green[3] = 1.0f;
ADDRLP4 80+12
CNSTF4 1065353216
ASGNF4
line 2958
;2957:
;2958:	blue[0] = 0;
ADDRLP4 64
CNSTF4 0
ASGNF4
line 2959
;2959:	blue[1] = 0;
ADDRLP4 64+4
CNSTF4 0
ASGNF4
line 2960
;2960:	blue[2] = 1.0f;
ADDRLP4 64+8
CNSTF4 1065353216
ASGNF4
line 2961
;2961:	blue[3] = 0.4f;
ADDRLP4 64+12
CNSTF4 1053609165
ASGNF4
line 2963
;2962:
;2963:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1988
line 2965
;2964:		//Sago: Do mad change of grapple placement:
;2965:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1992
line 2966
;2966:			continue;
ADDRGP4 $1989
JUMPV
LABELV $1992
line 2967
;2967:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1994
line 2968
;2968:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1994
line 2969
;2969:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1996
line 2970
;2970:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1989
line 2971
;2971:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2972
;2972:			continue;
ADDRGP4 $1989
JUMPV
LABELV $1996
line 2975
;2973:		}
;2974:
;2975:		ammo=cg.snap->ps.ammo[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2977
;2976:
;2977:		switch(i) {
ADDRLP4 100
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
LTI4 $2001
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $2001
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
LSHI4
ADDRGP4 $2014-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2014
address $2003
address $2004
address $2005
address $2006
address $2007
address $2008
address $2009
address $2010
address $2001
address $2011
address $2012
address $2013
code
LABELV $2003
line 2979
;2978:		case WP_MACHINEGUN:
;2979:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 2980
;2980:			break;
ADDRGP4 $2002
JUMPV
LABELV $2004
line 2982
;2981:		case WP_SHOTGUN:
;2982:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2983
;2983:			break;
ADDRGP4 $2002
JUMPV
LABELV $2005
line 2985
;2984:		case WP_GRENADE_LAUNCHER:
;2985:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2986
;2986:			break;
ADDRGP4 $2002
JUMPV
LABELV $2006
line 2988
;2987:		case WP_ROCKET_LAUNCHER:
;2988:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2989
;2989:			break;
ADDRGP4 $2002
JUMPV
LABELV $2007
line 2991
;2990:		case WP_LIGHTNING:
;2991:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 2992
;2992:			break;
ADDRGP4 $2002
JUMPV
LABELV $2008
line 2994
;2993:		case WP_RAILGUN:
;2994:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 2995
;2995:			break;
ADDRGP4 $2002
JUMPV
LABELV $2009
line 2997
;2996:		case WP_PLASMAGUN:
;2997:			max = 50;
ADDRLP4 16
CNSTI4 50
ASGNI4
line 2998
;2998:			break;
ADDRGP4 $2002
JUMPV
LABELV $2010
line 3000
;2999:		case WP_BFG:
;3000:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 3001
;3001:			break;
ADDRGP4 $2002
JUMPV
LABELV $2011
line 3003
;3002:		case WP_NAILGUN:
;3003:			max = 10;
ADDRLP4 16
CNSTI4 10
ASGNI4
line 3004
;3004:			break;
ADDRGP4 $2002
JUMPV
LABELV $2012
line 3006
;3005:		case WP_PROX_LAUNCHER:
;3006:			max = 5;
ADDRLP4 16
CNSTI4 5
ASGNI4
line 3007
;3007:			break;
ADDRGP4 $2002
JUMPV
LABELV $2013
line 3009
;3008:		case WP_CHAINGUN:
;3009:			max = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 3010
;3010:			break;
ADDRGP4 $2002
JUMPV
LABELV $2001
line 3012
;3011:		default:
;3012:			max = 1;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 3013
;3013:			break;
LABELV $2002
line 3016
;3014:		}
;3015:
;3016:		ammo = (ammo*100)/max;
ADDRLP4 4
CNSTI4 100
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 16
INDIRI4
DIVI4
ASGNI4
line 3018
;3017:
;3018:		if(ammo >=100)
ADDRLP4 4
INDIRI4
CNSTI4 100
LTI4 $2016
line 3019
;3019:			ammo=100;
ADDRLP4 4
CNSTI4 100
ASGNI4
LABELV $2016
line 3021
;3020:
;3021:		br=ammo*26/100;
ADDRLP4 20
CNSTI4 26
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 100
DIVI4
ASGNI4
line 3023
;3022:
;3023:		if(i!=WP_GAUNTLET && i!=WP_GRAPPLING_HOOK) {
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $2018
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $2018
line 3024
;3024:			if(ammo <= 20)
ADDRLP4 4
INDIRI4
CNSTI4 20
GTI4 $2020
line 3025
;3025:				CG_FillRect( x+2, y +40, br, 4, red);
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 40
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $2020
line 3026
;3026:			if(ammo > 20 && ammo <= 50)
ADDRLP4 4
INDIRI4
CNSTI4 20
LEI4 $2022
ADDRLP4 4
INDIRI4
CNSTI4 50
GTI4 $2022
line 3027
;3027:				CG_FillRect( x+2, y+40, br, 4, yellow);
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 40
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $2022
line 3028
;3028:			if(ammo > 50)
ADDRLP4 4
INDIRI4
CNSTI4 50
LEI4 $2024
line 3029
;3029:				CG_FillRect( x+2, y+40, br, 4, green);
ADDRLP4 8
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 40
ADDI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
ADDRLP4 80
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
LABELV $2024
line 3030
;3030:		}
LABELV $2018
line 3032
;3031:
;3032:		if(cg.snap->ps.ammo[i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2026
line 3033
;3033:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $2029
line 3034
;3034:				CG_FillRect( x, y , 30 , 38, blue );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 64
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3035
;3035:				CG_DrawRect( x, y, 30 ,38 ,2, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 3036
;3036:			}
ADDRGP4 $2027
JUMPV
LABELV $2029
line 3037
;3037:			else {
line 3038
;3038:				CG_FillRect( x, y,30, 38, blue );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 64
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3039
;3039:			}
line 3040
;3040:		}
ADDRGP4 $2027
JUMPV
LABELV $2026
line 3041
;3041:		else {
line 3042
;3042:			if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $2032
line 3043
;3043:				CG_FillRect( x, y , 30 , 38, red );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3044
;3044:				CG_DrawRect( x , y, 30,38,2, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 3045
;3045:			}
ADDRGP4 $2033
JUMPV
LABELV $2032
line 3046
;3046:			else {
line 3047
;3047:				CG_FillRect( x, y,30, 38, red );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 28
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3048
;3048:			}
LABELV $2033
line 3049
;3049:		}
LABELV $2027
line 3050
;3050:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 3051
;3051:		CG_DrawPic( x+7, y+2, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CNSTI4 7
ADDI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 108
CNSTF4 1098907648
ASGNF4
ADDRLP4 108
INDIRF4
ARGF4
ADDRLP4 108
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 3053
;3052:
;3053:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $2036
line 3054
;3054:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 112
INDIRP4
ASGNP4
line 3055
;3055:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 116
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 3056
;3056:			CG_DrawSmallStringColor(x - w/2 + 15, y+20, s, color);
ADDRLP4 8
INDIRI4
ADDRLP4 60
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 12
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 3057
;3057:		}
LABELV $2036
line 3059
;3058:
;3059:		x += 30;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 30
ADDI4
ASGNI4
line 3061
;3060:		//Sago: Undo mad change of weapons
;3061:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $2040
line 3062
;3062:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2040
line 3063
;3063:	}
LABELV $1989
line 2963
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1988
line 3064
;3064:}
LABELV $1975
endproc CG_DrawWeaponBar6 120 24
export CG_DrawWeaponBar7
proc CG_DrawWeaponBar7 88 24
line 3073
;3065:
;3066:/*
;3067:===============
;3068:CG_DrawWeaponBar7
;3069:===============
;3070:*/
;3071:
;3072:void CG_DrawWeaponBar7(int count, int bits, float *color)
;3073:{
line 3075
;3074:
;3075:	int y = 380;
ADDRLP4 28
CNSTI4 380
ASGNI4
line 3076
;3076:	int x = 320 - count * 15;
ADDRLP4 8
CNSTI4 320
CNSTI4 15
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 3085
;3077:	int i;
;3078:	float ammo;
;3079:	float max;
;3080:	int w;
;3081:	char *s;
;3082:	float yellow[4];
;3083:	float boxColor[4];
;3084:
;3085:	boxColor[1]=0;
ADDRLP4 12+4
CNSTF4 0
ASGNF4
line 3086
;3086:	boxColor[3]=0.4f;
ADDRLP4 12+12
CNSTF4 1053609165
ASGNF4
line 3088
;3087:
;3088:	yellow[0] = 1.0f;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 3089
;3089:	yellow[1] = 1.0f;
ADDRLP4 44+4
CNSTF4 1065353216
ASGNF4
line 3090
;3090:	yellow[2] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 3091
;3091:	yellow[3] = 1.0f;
ADDRLP4 44+12
CNSTF4 1065353216
ASGNF4
line 3093
;3092:
;3093:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2048
line 3095
;3094:		//Sago: Do mad change of grapple placement:
;3095:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $2052
line 3096
;3096:			continue;
ADDRGP4 $2049
JUMPV
LABELV $2052
line 3097
;3097:		if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $2054
line 3098
;3098:			i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $2054
line 3099
;3099:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $2056
line 3100
;3100:			if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $2049
line 3101
;3101:				i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3102
;3102:			continue;
ADDRGP4 $2049
JUMPV
LABELV $2056
line 3105
;3103:		}
;3104:
;3105:		ammo=cg.snap->ps.ammo[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 3107
;3106:
;3107:		switch(i) {
ADDRLP4 64
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 64
INDIRI4
LTI4 $2061
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $2061
ADDRLP4 0
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
ADDRGP4 $2074-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2074
address $2063
address $2064
address $2065
address $2066
address $2067
address $2068
address $2069
address $2070
address $2061
address $2071
address $2072
address $2073
code
LABELV $2063
line 3109
;3108:		case WP_MACHINEGUN:
;3109:			max = 100;
ADDRLP4 32
CNSTF4 1120403456
ASGNF4
line 3110
;3110:			break;
ADDRGP4 $2062
JUMPV
LABELV $2064
line 3112
;3111:		case WP_SHOTGUN:
;3112:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3113
;3113:			break;
ADDRGP4 $2062
JUMPV
LABELV $2065
line 3115
;3114:		case WP_GRENADE_LAUNCHER:
;3115:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3116
;3116:			break;
ADDRGP4 $2062
JUMPV
LABELV $2066
line 3118
;3117:		case WP_ROCKET_LAUNCHER:
;3118:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3119
;3119:			break;
ADDRGP4 $2062
JUMPV
LABELV $2067
line 3121
;3120:		case WP_LIGHTNING:
;3121:			max = 100;
ADDRLP4 32
CNSTF4 1120403456
ASGNF4
line 3122
;3122:			break;
ADDRGP4 $2062
JUMPV
LABELV $2068
line 3124
;3123:		case WP_RAILGUN:
;3124:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3125
;3125:			break;
ADDRGP4 $2062
JUMPV
LABELV $2069
line 3127
;3126:		case WP_PLASMAGUN:
;3127:			max = 50;
ADDRLP4 32
CNSTF4 1112014848
ASGNF4
line 3128
;3128:			break;
ADDRGP4 $2062
JUMPV
LABELV $2070
line 3130
;3129:		case WP_BFG:
;3130:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3131
;3131:			break;
ADDRGP4 $2062
JUMPV
LABELV $2071
line 3133
;3132:		case WP_NAILGUN:
;3133:			max = 10;
ADDRLP4 32
CNSTF4 1092616192
ASGNF4
line 3134
;3134:			break;
ADDRGP4 $2062
JUMPV
LABELV $2072
line 3136
;3135:		case WP_PROX_LAUNCHER:
;3136:			max = 5;
ADDRLP4 32
CNSTF4 1084227584
ASGNF4
line 3137
;3137:			break;
ADDRGP4 $2062
JUMPV
LABELV $2073
line 3139
;3138:		case WP_CHAINGUN:
;3139:			max = 100;
ADDRLP4 32
CNSTF4 1120403456
ASGNF4
line 3140
;3140:			break;
ADDRGP4 $2062
JUMPV
LABELV $2061
line 3142
;3141:		default:
;3142:			max = 1;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
line 3143
;3143:			break;
LABELV $2062
line 3146
;3144:		}
;3145:
;3146:		ammo = (ammo*100)/max;
ADDRLP4 4
CNSTF4 1120403456
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 32
INDIRF4
DIVF4
ASGNF4
line 3148
;3147:
;3148:		if((ammo >=100) || (ammo < 0))
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
GEF4 $2078
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $2076
LABELV $2078
line 3149
;3149:			ammo=100;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
LABELV $2076
line 3151
;3150:
;3151:		boxColor[2]=(ammo/100.0f)*1.0f;
ADDRLP4 12+8
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
DIVF4
MULF4
ASGNF4
line 3152
;3152:		boxColor[0]=1.0f-(ammo/100.0f)*1.0f;
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
ADDRLP4 72
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1120403456
DIVF4
MULF4
SUBF4
ASGNF4
line 3154
;3153:
;3154:		if ( i == cg.weaponSelect) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109152
INDIRI4
NEI4 $2080
line 3155
;3155:			CG_FillRect( x, y , 30 , 38, boxColor );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 12
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3156
;3156:			CG_DrawRect( x, y, 30 ,38 ,2, yellow);
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
CNSTF4 1073741824
ARGF4
ADDRLP4 44
ARGP4
ADDRGP4 CG_DrawRect
CALLV
pop
line 3157
;3157:		}
ADDRGP4 $2081
JUMPV
LABELV $2080
line 3158
;3158:		else {
line 3159
;3159:			CG_FillRect( x, y,30, 38, boxColor );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1108869120
ARGF4
ADDRLP4 12
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 3160
;3160:		}
LABELV $2081
line 3161
;3161:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 3162
;3162:		CG_DrawPic( x+7, y+2, 16, 16, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CNSTI4 7
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 76
CNSTF4 1098907648
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
CNSTI4 172
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 3164
;3163:
;3164:		if(cg.snap->ps.ammo[ i ]!=-1) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $2084
line 3165
;3165:			s = va("%i", cg.snap->ps.ammo[ i ] );
ADDRGP4 $1818
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 80
INDIRP4
ASGNP4
line 3166
;3166:			w = CG_DrawStrlen( s ) * SMALLCHAR_WIDTH;
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 84
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 3167
;3167:			CG_DrawSmallStringColor(x - w/2 + 15, y+20, s, color);
ADDRLP4 8
INDIRI4
ADDRLP4 40
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 28
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 3168
;3168:		}
LABELV $2084
line 3170
;3169:
;3170:		x += 30;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 30
ADDI4
ASGNI4
line 3172
;3171:		//Sago: Undo mad change of weapons
;3172:		if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $2088
line 3173
;3173:			i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2088
line 3174
;3174:	}
LABELV $2049
line 3093
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $2048
line 3175
;3175:}
LABELV $2042
endproc CG_DrawWeaponBar7 88 24
proc CG_WeaponSelectable 0 0
line 3184
;3176:
;3177:
;3178:/*
;3179:===============
;3180:CG_WeaponSelectable
;3181:===============
;3182:*/
;3183:static qboolean CG_WeaponSelectable( int i )
;3184:{
line 3185
;3185:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2091
line 3186
;3186:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2090
JUMPV
LABELV $2091
line 3188
;3187:	}
;3188:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $2094
line 3189
;3189:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2090
JUMPV
LABELV $2094
line 3192
;3190:	}
;3191:
;3192:	return qtrue;
CNSTI4 1
RETI4
LABELV $2090
endproc CG_WeaponSelectable 0 0
export CG_BestWeapon_f
proc CG_BestWeapon_f 8 0
line 3197
;3193:}
;3194:
;3195:static int CG_GetBestWeapon(void);
;3196:
;3197:void CG_BestWeapon_f( void ) {
line 3200
;3198:	int		newW;
;3199:
;3200:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2098
line 3201
;3201:		return;
ADDRGP4 $2097
JUMPV
LABELV $2098
line 3203
;3202:	}
;3203:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2101
line 3204
;3204:		return;
ADDRGP4 $2097
JUMPV
LABELV $2101
line 3207
;3205:	}
;3206:
;3207:	newW = CG_GetBestWeapon();
ADDRLP4 4
ADDRGP4 CG_GetBestWeapon
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 3208
;3208:	if (newW != WP_NONE) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $2104
line 3209
;3209:		cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125268
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3210
;3210:		cg.weaponSelect = newW;
ADDRGP4 cg+109152
ADDRLP4 0
INDIRI4
ASGNI4
line 3211
;3211:	}
LABELV $2104
line 3212
;3212:}
LABELV $2097
endproc CG_BestWeapon_f 8 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 3220
;3213:
;3214:/*
;3215:===============
;3216:CG_NextWeapon_f
;3217:===============
;3218:*/
;3219:void CG_NextWeapon_f( void )
;3220:{
line 3224
;3221:	int		i;
;3222:	int		original;
;3223:
;3224:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2110
line 3225
;3225:		return;
ADDRGP4 $2109
JUMPV
LABELV $2110
line 3227
;3226:	}
;3227:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2113
line 3228
;3228:		return;
ADDRGP4 $2109
JUMPV
LABELV $2113
line 3231
;3229:	}
;3230:
;3231:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125268
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3232
;3232:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109152
INDIRI4
ASGNI4
line 3234
;3233:	//Part of mad hook select code:
;3234:	if(cg.weaponSelect == WP_GRAPPLING_HOOK)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2119
line 3235
;3235:		cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
LABELV $2119
line 3237
;3236:
;3237:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2123
line 3238
;3238:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+109152
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3239
;3239:		if ( cg.weaponSelect == MAX_WEAPONS ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 16
NEI4 $2128
line 3240
;3240:			cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
line 3241
;3241:		}
LABELV $2128
line 3242
;3242:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 1
NEI4 $2132
line 3243
;3243:			continue;		// never cycle to gauntlet
ADDRGP4 $2124
JUMPV
LABELV $2132
line 3246
;3244:		}
;3245:		//Sago: Mad change of grapple order
;3246:		if( cg.weaponSelect == WP_GRAPPLING_HOOK)  {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2135
line 3247
;3247:			continue;
ADDRGP4 $2124
JUMPV
LABELV $2135
line 3249
;3248:		}
;3249:		if( cg.weaponSelect == 0)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 0
NEI4 $2138
line 3250
;3250:			cg.weaponSelect = WP_GRAPPLING_HOOK;
ADDRGP4 cg+109152
CNSTI4 10
ASGNI4
LABELV $2138
line 3251
;3251:		if ( cg.weaponSelect == WP_GRAPPLING_HOOK && !cg_cyclegrapple.integer ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2142
ADDRGP4 cg_cyclegrapple+12
INDIRI4
CNSTI4 0
NEI4 $2142
line 3252
;3252:			cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
line 3253
;3253:			continue;		// never cycle to grapple unless the client wants it
ADDRGP4 $2124
JUMPV
LABELV $2142
line 3255
;3254:		}
;3255:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+109152
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $2147
line 3256
;3256:			break;
ADDRGP4 $2125
JUMPV
LABELV $2147
line 3258
;3257:		}
;3258:		if( cg.weaponSelect == WP_GRAPPLING_HOOK)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2150
line 3259
;3259:			cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
LABELV $2150
line 3260
;3260:	}
LABELV $2124
line 3237
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $2123
LABELV $2125
line 3261
;3261:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $2154
line 3262
;3262:		cg.weaponSelect = original;
ADDRGP4 cg+109152
ADDRLP4 4
INDIRI4
ASGNI4
line 3263
;3263:	}
LABELV $2154
line 3264
;3264:}
LABELV $2109
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 3272
;3265:
;3266:/*
;3267:===============
;3268:CG_PrevWeapon_f
;3269:===============
;3270:*/
;3271:void CG_PrevWeapon_f( void )
;3272:{
line 3276
;3273:	int		i;
;3274:	int		original;
;3275:
;3276:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2158
line 3277
;3277:		return;
ADDRGP4 $2157
JUMPV
LABELV $2158
line 3279
;3278:	}
;3279:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2161
line 3280
;3280:		return;
ADDRGP4 $2157
JUMPV
LABELV $2161
line 3283
;3281:	}
;3282:
;3283:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125268
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3284
;3284:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109152
INDIRI4
ASGNI4
line 3286
;3285:	//Part of mad hook select code:
;3286:	if(cg.weaponSelect == WP_GRAPPLING_HOOK)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2167
line 3287
;3287:		cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
LABELV $2167
line 3289
;3288:
;3289:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2171
line 3290
;3290:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+109152
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3291
;3291:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 -1
NEI4 $2176
line 3292
;3292:			cg.weaponSelect = MAX_WEAPONS - 1;
ADDRGP4 cg+109152
CNSTI4 15
ASGNI4
line 3293
;3293:		}
LABELV $2176
line 3294
;3294:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 1
NEI4 $2180
line 3295
;3295:			continue;		// never cycle to gauntlet
ADDRGP4 $2172
JUMPV
LABELV $2180
line 3298
;3296:		}
;3297:		//Sago: Mad change of grapple order
;3298:		if( cg.weaponSelect == WP_GRAPPLING_HOOK)  {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2183
line 3299
;3299:			continue;
ADDRGP4 $2172
JUMPV
LABELV $2183
line 3301
;3300:		}
;3301:		if( cg.weaponSelect == 0)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 0
NEI4 $2186
line 3302
;3302:			cg.weaponSelect = WP_GRAPPLING_HOOK;
ADDRGP4 cg+109152
CNSTI4 10
ASGNI4
LABELV $2186
line 3303
;3303:		if ( cg.weaponSelect == WP_GRAPPLING_HOOK && !cg_cyclegrapple.integer ) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2190
ADDRGP4 cg_cyclegrapple+12
INDIRI4
CNSTI4 0
NEI4 $2190
line 3304
;3304:			cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
line 3305
;3305:			continue;		// never cycle to grapple unless the client wants it
ADDRGP4 $2172
JUMPV
LABELV $2190
line 3307
;3306:		}
;3307:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+109152
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $2195
line 3308
;3308:			break;
ADDRGP4 $2173
JUMPV
LABELV $2195
line 3310
;3309:		}
;3310:		if( cg.weaponSelect == WP_GRAPPLING_HOOK)
ADDRGP4 cg+109152
INDIRI4
CNSTI4 10
NEI4 $2198
line 3311
;3311:			cg.weaponSelect = 0;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
LABELV $2198
line 3312
;3312:	}
LABELV $2172
line 3289
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $2171
LABELV $2173
line 3313
;3313:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $2202
line 3314
;3314:		cg.weaponSelect = original;
ADDRGP4 cg+109152
ADDRLP4 4
INDIRI4
ASGNI4
line 3315
;3315:	}
LABELV $2202
line 3316
;3316:}
LABELV $2157
endproc CG_PrevWeapon_f 16 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 3324
;3317:
;3318:/*
;3319:===============
;3320:CG_Weapon_f
;3321:===============
;3322:*/
;3323:void CG_Weapon_f( void )
;3324:{
line 3327
;3325:	int		num;
;3326:
;3327:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2206
line 3328
;3328:		return;
ADDRGP4 $2205
JUMPV
LABELV $2206
line 3330
;3329:	}
;3330:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2209
line 3331
;3331:		return;
ADDRGP4 $2205
JUMPV
LABELV $2209
line 3334
;3332:	}
;3333:
;3334:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 3336
;3335:
;3336:	if ( num < 1 || num > MAX_WEAPONS-1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $2214
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $2212
LABELV $2214
line 3337
;3337:		return;
ADDRGP4 $2205
JUMPV
LABELV $2212
line 3340
;3338:	}
;3339:
;3340:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125268
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3342
;3341:
;3342:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $2217
line 3343
;3343:		return;		// don't have the weapon
ADDRGP4 $2205
JUMPV
LABELV $2217
line 3346
;3344:	}
;3345:
;3346:	cg.weaponSelect = num;
ADDRGP4 cg+109152
ADDRLP4 0
INDIRI4
ASGNI4
line 3347
;3347:}
LABELV $2205
endproc CG_Weapon_f 16 4
proc CG_GetBestWeapon 24 8
line 3354
;3348:
;3349:/**
;3350: * Gives the best weapon with ammo based on cg_weaponOrder
;3351: * If it cannot find a weapon WP_NONE is returned
;3352: * @return A weapon number or WP_NONE if none is found
;3353: */
;3354:static int CG_GetBestWeapon(void) {
line 3355
;3355:	int ret = WP_NONE;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 3358
;3356:	const char* currentPlace;
;3357:	int newWeaponNumber;
;3358:	for (currentPlace = strstr(cg_weaponOrder.string, "/"); currentPlace; currentPlace = strstr(currentPlace, "/") ) {
ADDRGP4 cg_weaponOrder+16
ARGP4
ADDRGP4 $2227
ARGP4
ADDRLP4 12
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRGP4 $2225
JUMPV
LABELV $2222
line 3359
;3359:		currentPlace++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 3360
;3360:		newWeaponNumber = atoi(currentPlace);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 3361
;3361:		if ( CG_WeaponSelectable(newWeaponNumber) ) {
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $2228
line 3362
;3362:			ret = newWeaponNumber;
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
line 3363
;3363:		}
LABELV $2228
line 3364
;3364:	}
LABELV $2223
line 3358
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $2227
ARGP4
ADDRLP4 16
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $2225
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2222
line 3365
;3365:	return ret;
ADDRLP4 8
INDIRI4
RETI4
LABELV $2221
endproc CG_GetBestWeapon 24 8
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 12 4
line 3376
;3366:}
;3367:
;3368:/*
;3369:===================
;3370:CG_OutOfAmmoChange
;3371:
;3372:The current weapon has just run out of ammo
;3373:===================
;3374:*/
;3375:void CG_OutOfAmmoChange( void )
;3376:{
line 3379
;3377:	int		i;
;3378:
;3379:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125268
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3380
;3380:	cg.weaponSelect = CG_GetBestWeapon();
ADDRLP4 4
ADDRGP4 CG_GetBestWeapon
CALLI4
ASGNI4
ADDRGP4 cg+109152
ADDRLP4 4
INDIRI4
ASGNI4
line 3381
;3381:	if (cg.weaponSelect == WP_NONE) {
ADDRGP4 cg+109152
INDIRI4
CNSTI4 0
NEI4 $2234
line 3382
;3382:		for ( i = MAX_WEAPONS-1 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $2237
line 3383
;3383:			if ( CG_WeaponSelectable( i ) && i != WP_GRAPPLING_HOOK ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $2241
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $2241
line 3384
;3384:				cg.weaponSelect = i;
ADDRGP4 cg+109152
ADDRLP4 0
INDIRI4
ASGNI4
line 3385
;3385:				break;
ADDRGP4 $2239
JUMPV
LABELV $2241
line 3387
;3386:			}
;3387:		}
LABELV $2238
line 3382
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $2237
LABELV $2239
line 3388
;3388:	}
LABELV $2234
line 3389
;3389:}
LABELV $2230
endproc CG_OutOfAmmoChange 12 4
export CG_FireWeapon
proc CG_FireWeapon 36 16
line 3409
;3390:
;3391:
;3392:
;3393:/*
;3394:===================================================================================================
;3395:
;3396:WEAPON EVENTS
;3397:
;3398:===================================================================================================
;3399:*/
;3400:
;3401:/*
;3402:================
;3403:CG_FireWeapon
;3404:
;3405:Caused by an EV_FIRE_WEAPON event
;3406:================
;3407:*/
;3408:void CG_FireWeapon( centity_t *cent )
;3409:{
line 3414
;3410:	entityState_t *ent;
;3411:	int				c;
;3412:	weaponInfo_t	*weap;
;3413:
;3414:	if(CG_IsARoundBasedGametype(cgs.gametype) && CG_IsATeamGametype(cgs.gametype) && cgs.roundStartTime>=cg.time)
ADDRGP4 cgs+31456
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_IsARoundBasedGametype
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $2245
ADDRGP4 cgs+31456
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_IsATeamGametype
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $2245
ADDRGP4 cgs+34808
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LTI4 $2245
line 3415
;3415:		return; //if we havn't started in ELIMINATION then do not fire
ADDRGP4 $2244
JUMPV
LABELV $2245
line 3417
;3416:
;3417:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 3418
;3418:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2251
line 3419
;3419:		return;
ADDRGP4 $2244
JUMPV
LABELV $2251
line 3421
;3420:	}
;3421:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 14
LTI4 $2253
line 3422
;3422:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $2255
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 3423
;3423:		return;
ADDRGP4 $2244
JUMPV
LABELV $2253
line 3425
;3424:	}
;3425:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
CNSTI4 172
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 3429
;3426:
;3427:	// mark the entity as muzzle flashing, so when it is added it will
;3428:	// append the flash to the weapon model
;3429:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3432
;3430:
;3431:	// leilei - hack for multiple muzzleflashes
;3432:	cent->muztime[cent->muzslot] = cg.time;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 912
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 892
ADDP4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3433
;3433:	cent->muzslot += 1;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 912
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3434
;3434:	if (cent->muzslot > 2)
ADDRFP4 0
INDIRP4
CNSTI4 912
ADDP4
INDIRI4
CNSTI4 2
LEI4 $2258
line 3435
;3435:	cent->muzslot = 0;
ADDRFP4 0
INDIRP4
CNSTI4 912
ADDP4
CNSTI4 0
ASGNI4
LABELV $2258
line 3438
;3436:
;3437:	// lightning gun only does this this on initial press
;3438:	if ( ent->weapon == WP_LIGHTNING ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $2260
line 3439
;3439:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2262
line 3440
;3440:			return;
ADDRGP4 $2244
JUMPV
LABELV $2262
line 3442
;3441:		}
;3442:	}
LABELV $2260
line 3445
;3443:
;3444:	// play quad sound if needed
;3445:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $2264
line 3446
;3446:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+180268+804
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3447
;3447:	}
LABELV $2264
line 3450
;3448:
;3449:	// play a sound
;3450:	for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2268
line 3451
;3451:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2272
line 3452
;3452:			break;
ADDRGP4 $2270
JUMPV
LABELV $2272
line 3454
;3453:		}
;3454:	}
LABELV $2269
line 3450
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $2268
LABELV $2270
line 3455
;3455:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $2274
line 3456
;3456:		c = rand() % c;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 3457
;3457:		if ( weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2276
line 3458
;3458:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 32
CNSTI4 2
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 32
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3459
;3459:		}
LABELV $2276
line 3460
;3460:	}
LABELV $2274
line 3463
;3461:
;3462:	// do brass ejection
;3463:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2278
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $2278
line 3464
;3464:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 3465
;3465:	}
LABELV $2278
line 3468
;3466:
;3467://unlagged - attack prediction #1
;3468:	CG_PredictWeaponEffects( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PredictWeaponEffects
CALLV
pop
line 3470
;3469://unlagged - attack prediction #1
;3470:}
LABELV $2244
endproc CG_FireWeapon 36 16
export CG_MissileHitWall
proc CG_MissileHitWall 116 44
line 3558
;3471:
;3472:
;3473:/*
;3474:==========================
;3475:CG_Explosionia LEILEI
;3476:==========================
;3477:
;3478:static void CG_Explosionia ( centity_t *cent ) {
;3479:	localEntity_t	*le;
;3480:	ec3_t			velocity, xvelocity;
;3481:	vec3_t			offset, xoffset;
;3482:	float			waterScale = 1.0f;
;3483:	vec3_t			v[3];
;3484:
;3485:	if ( cg_brassTime.integer <= 0 ) {
;3486:		return;
;3487:	}
;3488:
;3489:	le = CG_AllocLocalEntity();
;3490:
;3491:
;3492:	velocity[0] = -50 + 100 * crandom();
;3493:	velocity[1] = -50 + 100 * crandom();
;3494:	velocity[2] = -50 + 100 * crandom();
;3495:
;3496:	le->leType = LE_FALL_SCALE_FADE;
;3497:	le->startTime = cg.time;
;3498:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
;3499:
;3500:	//le->pos.trType = TR_GRAVITY;
;3501:	le->pos.trTime = cg.time - (rand()&15);
;3502:
;3503:	AnglesToAxis( cent->lerpAngles, v );
;3504:
;3505:	offset[0] = 8;
;3506:	offset[1] = -4;
;3507:	offset[2] = 24;
;3508:
;3509:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;3510:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;3511:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;3512:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
;3513:
;3514:	VectorCopy( re->origin, le->pos.trBase );
;3515:
;3516:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
;3517:		waterScale = 0.10f;
;3518:	}
;3519:
;3520:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
;3521:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
;3522:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
;3523:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
;3524:
;3525:	le->bounceFactor = 0.4 * waterScale;
;3526:
;3527:	le->angles.trType = TR_LINEAR;
;3528:	le->angles.trTime = cg.time;
;3529:	le->angles.trBase[0] = rand()&31;
;3530:	le->angles.trBase[1] = rand()&31;
;3531:	le->angles.trBase[2] = rand()&31;
;3532:	le->angles.trDelta[0] = 2;
;3533:	le->angles.trDelta[1] = 1;
;3534:	le->angles.trDelta[2] = 0;
;3535:	le = CG_SmokePuff( le->origin, le->velocity,
;3536:					  30,		// radius
;3537:					  1, 1, 1, 1,	// color
;3538:					  2000,		// trailTime
;3539:					  cg.time,		// startTime
;3540:					  0,		// fadeInTime
;3541:					  0,		// flags
;3542:					  cgs.media.lbumShader1 );
;3543:	le->leFlags = LEF_TUMBLE;
;3544:	le->leBounceSoundType = LEBS_NONE;
;3545:	le->leMarkType = LEMT_NONE;
;3546:}
;3547:
;3548:*/
;3549:
;3550:/*
;3551:=================
;3552:CG_MissileHitWall
;3553:
;3554:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;3555:=================
;3556:*/
;3557:void CG_MissileHitWall( int weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType )
;3558:{
line 3572
;3559:	qhandle_t		mod;
;3560:	qhandle_t		mark;
;3561:	qhandle_t		shader;
;3562:	sfxHandle_t		sfx;
;3563:	float			radius;
;3564:	float			light;
;3565:	vec3_t			lightColor;
;3566:	localEntity_t	*le;
;3567:	int				r;
;3568:	qboolean		alphaFade;
;3569:	qboolean		isSprite;
;3570:	int				duration;
;3571:
;3572:	mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3573
;3573:	radius = 32;
ADDRLP4 20
CNSTF4 1107296256
ASGNF4
line 3574
;3574:	sfx = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 3575
;3575:	mod = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 3576
;3576:	shader = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 3577
;3577:	light = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
line 3578
;3578:	lightColor[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 3579
;3579:	lightColor[1] = 1;
ADDRLP4 8+4
CNSTF4 1065353216
ASGNF4
line 3580
;3580:	lightColor[2] = 0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 3583
;3581:
;3582:	// set defaults
;3583:	isSprite = qfalse;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 3584
;3584:	duration = 600;
ADDRLP4 36
CNSTI4 600
ASGNI4
line 3586
;3585:
;3586:	switch ( weapon ) {
ADDRLP4 56
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 60
CNSTI4 2
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
LTI4 $2284
ADDRLP4 56
INDIRI4
CNSTI4 13
GTI4 $2284
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
LSHI4
ADDRGP4 $2447-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2447
address $2427
address $2389
address $2327
address $2339
address $2302
address $2353
address $2365
address $2377
address $2284
address $2286
address $2315
address $2399
code
LABELV $2284
LABELV $2286
line 3590
;3587:	default:
;3588://#ifdef MISSIONPACK
;3589:	case WP_NAILGUN:
;3590:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $2287
line 3591
;3591:			sfx = cgs.media.sfx_nghitflesh;
ADDRLP4 4
ADDRGP4 cgs+180268+980
INDIRI4
ASGNI4
line 3592
;3592:		}
ADDRGP4 $2288
JUMPV
LABELV $2287
line 3593
;3593:		else if( soundType == IMPACTSOUND_METAL ) {
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $2291
line 3594
;3594:			sfx = cgs.media.sfx_nghitmetal;
ADDRLP4 4
ADDRGP4 cgs+180268+984
INDIRI4
ASGNI4
line 3595
;3595:		}
ADDRGP4 $2292
JUMPV
LABELV $2291
line 3596
;3596:		else {
line 3597
;3597:			sfx = cgs.media.sfx_nghit;
ADDRLP4 4
ADDRGP4 cgs+180268+976
INDIRI4
ASGNI4
line 3598
;3598:		}
LABELV $2292
LABELV $2288
line 3599
;3599:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+536
INDIRI4
ASGNI4
line 3600
;3600:		radius = 12;
ADDRLP4 20
CNSTF4 1094713344
ASGNF4
line 3601
;3601:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3602
;3602:			trap_R_LFX_ParticleEffect(10, origin, dir); // that was easy.
CNSTI4 10
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3603
;3603:		}
line 3604
;3604:		break;
ADDRGP4 $2285
JUMPV
LABELV $2302
line 3608
;3605://#endif
;3606:	case WP_LIGHTNING:
;3607:		// no explosion at LG impact, it is added with the beam
;3608:		r = rand() & 3;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 64
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3609
;3609:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $2303
line 3610
;3610:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 4
ADDRGP4 cgs+180268+940
INDIRI4
ASGNI4
line 3611
;3611:		}
ADDRGP4 $2304
JUMPV
LABELV $2303
line 3612
;3612:		else if ( r == 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $2307
line 3613
;3613:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 4
ADDRGP4 cgs+180268+936
INDIRI4
ASGNI4
line 3614
;3614:		}
ADDRGP4 $2308
JUMPV
LABELV $2307
line 3615
;3615:		else {
line 3616
;3616:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 4
ADDRGP4 cgs+180268+944
INDIRI4
ASGNI4
line 3617
;3617:		}
LABELV $2308
LABELV $2304
line 3618
;3618:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+536
INDIRI4
ASGNI4
line 3619
;3619:		radius = 12;
ADDRLP4 20
CNSTF4 1094713344
ASGNF4
line 3620
;3620:		break;
ADDRGP4 $2285
JUMPV
LABELV $2315
line 3623
;3621://#ifdef MISSIONPACK
;3622:	case WP_PROX_LAUNCHER:
;3623:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+604
INDIRI4
ASGNI4
line 3624
;3624:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+628
INDIRI4
ASGNI4
line 3625
;3625:		sfx = cgs.media.sfx_proxexp;
ADDRLP4 4
ADDRGP4 cgs+180268+972
INDIRI4
ASGNI4
line 3626
;3626:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+532
INDIRI4
ASGNI4
line 3627
;3627:		radius = 64;
ADDRLP4 20
CNSTF4 1115684864
ASGNF4
line 3628
;3628:		light = 300;
ADDRLP4 48
CNSTF4 1133903872
ASGNF4
line 3629
;3629:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3630
;3630:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3631
;3631:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3632
;3632:			trap_R_LFX_ParticleEffect(11, origin, dir); // that was easy.
CNSTI4 11
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3633
;3633:		}
line 3636
;3634:		// LEILEI END enhancement
;3635:
;3636:		break;
ADDRGP4 $2285
JUMPV
LABELV $2327
line 3639
;3637://#endif
;3638:	case WP_GRENADE_LAUNCHER:
;3639:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+604
INDIRI4
ASGNI4
line 3640
;3640:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+628
INDIRI4
ASGNI4
line 3641
;3641:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 4
ADDRGP4 cgs+180268+964
INDIRI4
ASGNI4
line 3642
;3642:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+532
INDIRI4
ASGNI4
line 3643
;3643:		radius = 64;
ADDRLP4 20
CNSTF4 1115684864
ASGNF4
line 3644
;3644:		light = 300;
ADDRLP4 48
CNSTF4 1133903872
ASGNF4
line 3645
;3645:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3646
;3646:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3647
;3647:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3648
;3648:			trap_R_LFX_ParticleEffect(4, origin, dir); // that was easy.
CNSTI4 4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3649
;3649:		}
line 3651
;3650:		// LEILEI END enhancement
;3651:		break;
ADDRGP4 $2285
JUMPV
LABELV $2339
line 3653
;3652:	case WP_ROCKET_LAUNCHER:
;3653:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+604
INDIRI4
ASGNI4
line 3654
;3654:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+624
INDIRI4
ASGNI4
line 3655
;3655:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 4
ADDRGP4 cgs+180268+964
INDIRI4
ASGNI4
line 3656
;3656:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+532
INDIRI4
ASGNI4
line 3657
;3657:		radius = 64;
ADDRLP4 20
CNSTF4 1115684864
ASGNF4
line 3658
;3658:		light = 300;
ADDRLP4 48
CNSTF4 1133903872
ASGNF4
line 3659
;3659:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3660
;3660:		duration = 1000;
ADDRLP4 36
CNSTI4 1000
ASGNI4
line 3661
;3661:		lightColor[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 3662
;3662:		lightColor[1] = 0.75;
ADDRLP4 8+4
CNSTF4 1061158912
ASGNF4
line 3663
;3663:		lightColor[2] = 0.0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 3665
;3664:
;3665:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3666
;3666:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3667
;3667:			trap_R_LFX_ParticleEffect(5, origin, dir); // that was easy.
CNSTI4 5
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3668
;3668:		}
line 3670
;3669:		// LEILEI END enhancement
;3670:		break;
ADDRGP4 $2285
JUMPV
LABELV $2353
line 3672
;3671:	case WP_RAILGUN:
;3672:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+600
INDIRI4
ASGNI4
line 3673
;3673:		shader = cgs.media.railExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+612
INDIRI4
ASGNI4
line 3674
;3674:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 4
ADDRGP4 cgs+180268+968
INDIRI4
ASGNI4
line 3675
;3675:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+540
INDIRI4
ASGNI4
line 3676
;3676:		radius = 24;
ADDRLP4 20
CNSTF4 1103101952
ASGNF4
line 3677
;3677:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3678
;3678:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3679
;3679:			trap_R_LFX_ParticleEffect(30, origin, dir); // that was easy.
CNSTI4 30
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3680
;3680:		}
line 3681
;3681:		break;
ADDRGP4 $2285
JUMPV
LABELV $2365
line 3683
;3682:	case WP_PLASMAGUN:
;3683:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+600
INDIRI4
ASGNI4
line 3684
;3684:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+616
INDIRI4
ASGNI4
line 3685
;3685:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 4
ADDRGP4 cgs+180268+968
INDIRI4
ASGNI4
line 3686
;3686:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+540
INDIRI4
ASGNI4
line 3687
;3687:		radius = 16;
ADDRLP4 20
CNSTF4 1098907648
ASGNF4
line 3688
;3688:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3689
;3689:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3690
;3690:			trap_R_LFX_ParticleEffect(6, origin, dir); // that was easy.
CNSTI4 6
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3691
;3691:		}
line 3693
;3692:
;3693:		break;
ADDRGP4 $2285
JUMPV
LABELV $2377
line 3695
;3694:	case WP_BFG:
;3695:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+604
INDIRI4
ASGNI4
line 3696
;3696:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+632
INDIRI4
ASGNI4
line 3697
;3697:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 4
ADDRGP4 cgs+180268+964
INDIRI4
ASGNI4
line 3698
;3698:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+532
INDIRI4
ASGNI4
line 3699
;3699:		radius = 32;
ADDRLP4 20
CNSTF4 1107296256
ASGNF4
line 3700
;3700:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 3701
;3701:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3702
;3702:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3703
;3703:			trap_R_LFX_ParticleEffect(9, origin, dir); // that was easy.
CNSTI4 9
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3704
;3704:		}
line 3705
;3705:		break;
ADDRGP4 $2285
JUMPV
LABELV $2389
line 3707
;3706:	case WP_SHOTGUN:
;3707:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+596
INDIRI4
ASGNI4
line 3708
;3708:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+620
INDIRI4
ASGNI4
line 3709
;3709:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+528
INDIRI4
ASGNI4
line 3710
;3710:		sfx = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 3711
;3711:		radius = 4;
ADDRLP4 20
CNSTF4 1082130432
ASGNF4
line 3712
;3712:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3713
;3713:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3714
;3714:			trap_R_LFX_ParticleEffect(3, origin, dir); // that was easy.
CNSTI4 3
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3715
;3715:		}
line 3716
;3716:		break;
ADDRGP4 $2285
JUMPV
LABELV $2399
line 3719
;3717:
;3718:	case WP_CHAINGUN:
;3719:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+596
INDIRI4
ASGNI4
line 3720
;3720:		if (cg_leiEnhancement.integer == 1996) {	// leilei - q effects
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 1996
NEI4 $2402
line 3721
;3721:			light = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
line 3722
;3722:			radius = 1;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 3723
;3723:			duration = 1;	// bit more instant
ADDRLP4 36
CNSTI4 1
ASGNI4
line 3724
;3724:			break;
ADDRGP4 $2285
JUMPV
LABELV $2402
line 3727
;3725:		}
;3726:
;3727:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $2405
line 3728
;3728:			sfx = cgs.media.sfx_chghitflesh;
ADDRLP4 4
ADDRGP4 cgs+180268+992
INDIRI4
ASGNI4
line 3729
;3729:		}
ADDRGP4 $2406
JUMPV
LABELV $2405
line 3730
;3730:		else if( soundType == IMPACTSOUND_METAL ) {
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $2409
line 3731
;3731:			sfx = cgs.media.sfx_chghitmetal;
ADDRLP4 4
ADDRGP4 cgs+180268+996
INDIRI4
ASGNI4
line 3732
;3732:		}
ADDRGP4 $2410
JUMPV
LABELV $2409
line 3733
;3733:		else {
line 3734
;3734:			sfx = cgs.media.sfx_chghit;
ADDRLP4 4
ADDRGP4 cgs+180268+988
INDIRI4
ASGNI4
line 3735
;3735:		}
LABELV $2410
LABELV $2406
line 3737
;3736:
;3737:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+528
INDIRI4
ASGNI4
line 3738
;3738:		r = rand() & 3;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 68
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3739
;3739:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $2417
line 3740
;3740:			sfx = cgs.media.sfx_ric1;
ADDRLP4 4
ADDRGP4 cgs+180268+948
INDIRI4
ASGNI4
line 3741
;3741:		}
ADDRGP4 $2418
JUMPV
LABELV $2417
line 3742
;3742:		else if ( r == 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $2421
line 3743
;3743:			sfx = cgs.media.sfx_ric2;
ADDRLP4 4
ADDRGP4 cgs+180268+952
INDIRI4
ASGNI4
line 3744
;3744:		}
ADDRGP4 $2422
JUMPV
LABELV $2421
line 3745
;3745:		else {
line 3746
;3746:			sfx = cgs.media.sfx_ric3;
ADDRLP4 4
ADDRGP4 cgs+180268+956
INDIRI4
ASGNI4
line 3747
;3747:		}
LABELV $2422
LABELV $2418
line 3749
;3748:
;3749:		radius = 8;
ADDRLP4 20
CNSTF4 1090519040
ASGNF4
line 3750
;3750:		break;
ADDRGP4 $2285
JUMPV
LABELV $2427
line 3754
;3751:
;3752:	// Shared with Vulcan/Chaingun
;3753:	case WP_MACHINEGUN:
;3754:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+180268+596
INDIRI4
ASGNI4
line 3755
;3755:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+180268+620
INDIRI4
ASGNI4
line 3756
;3756:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+180268+528
INDIRI4
ASGNI4
line 3758
;3757:
;3758:		r = rand() & 3;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 72
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3759
;3759:		if ( r == 0 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $2434
line 3760
;3760:			sfx = cgs.media.sfx_ric1;
ADDRLP4 4
ADDRGP4 cgs+180268+948
INDIRI4
ASGNI4
line 3761
;3761:		}
ADDRGP4 $2435
JUMPV
LABELV $2434
line 3762
;3762:		else if ( r == 1 ) {
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $2438
line 3763
;3763:			sfx = cgs.media.sfx_ric2;
ADDRLP4 4
ADDRGP4 cgs+180268+952
INDIRI4
ASGNI4
line 3764
;3764:		}
ADDRGP4 $2439
JUMPV
LABELV $2438
line 3765
;3765:		else {
line 3766
;3766:			sfx = cgs.media.sfx_ric3;
ADDRLP4 4
ADDRGP4 cgs+180268+956
INDIRI4
ASGNI4
line 3767
;3767:		}
LABELV $2439
LABELV $2435
line 3769
;3768:
;3769:		radius = 8;
ADDRLP4 20
CNSTF4 1090519040
ASGNF4
line 3770
;3770:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2285
line 3771
;3771:			duration = 10;
ADDRLP4 36
CNSTI4 10
ASGNI4
line 3772
;3772:			trap_R_LFX_ParticleEffect(2, origin, dir); // that was easy.
CNSTI4 2
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3773
;3773:		}
line 3774
;3774:		break;
LABELV $2285
line 3777
;3775:	}
;3776:
;3777:	if ( sfx ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $2449
line 3778
;3778:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3779
;3779:	}
LABELV $2449
line 3784
;3780:
;3781:	//
;3782:	// create the explosion
;3783:	//
;3784:		if (!cg_leiEnhancement.integer) 	// don't make it when particles are enabled
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
NEI4 $2451
line 3785
;3785:	if ( mod ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $2454
line 3786
;3786:		le = CG_MakeExplosion( origin, dir,
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 64
INDIRP4
ASGNP4
line 3789
;3787:		                       mod,	shader,
;3788:		                       duration, isSprite );
;3789:		le->light = light;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 3790
;3790:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 3791
;3791:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2456
line 3793
;3792:			// colorize with client color
;3793:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 40
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 2120
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cgs+41152+76
ADDP4
INDIRB
ASGNB 12
line 3794
;3794:			le->refEntity.shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 72
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 76
CNSTF4 1132396544
ADDRLP4 72
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
CNSTF4 1325400064
ASGNF4
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
LTF4 $2461
ADDRLP4 68
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2462
JUMPV
LABELV $2461
ADDRLP4 68
ADDRLP4 76
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2462
ADDRLP4 72
INDIRP4
CNSTI4 268
ADDP4
ADDRLP4 68
INDIRU4
CVUU1 4
ASGNU1
line 3795
;3795:			le->refEntity.shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 88
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 92
CNSTF4 1132396544
ADDRLP4 88
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96
CNSTF4 1325400064
ASGNF4
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRF4
LTF4 $2464
ADDRLP4 84
ADDRLP4 92
INDIRF4
ADDRLP4 96
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2465
JUMPV
LABELV $2464
ADDRLP4 84
ADDRLP4 92
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2465
ADDRLP4 88
INDIRP4
CNSTI4 269
ADDP4
ADDRLP4 84
INDIRU4
CVUU1 4
ASGNU1
line 3796
;3796:			le->refEntity.shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 104
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 108
CNSTF4 1132396544
ADDRLP4 104
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 112
CNSTF4 1325400064
ASGNF4
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
LTF4 $2467
ADDRLP4 100
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $2468
JUMPV
LABELV $2467
ADDRLP4 100
ADDRLP4 108
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $2468
ADDRLP4 104
INDIRP4
CNSTI4 270
ADDP4
ADDRLP4 100
INDIRU4
CVUU1 4
ASGNU1
line 3797
;3797:			le->refEntity.shaderRGBA[3] = 0xff;
ADDRLP4 40
INDIRP4
CNSTI4 271
ADDP4
CNSTU1 255
ASGNU1
line 3798
;3798:		}
LABELV $2456
line 3799
;3799:	}
LABELV $2454
LABELV $2451
line 3804
;3800:
;3801:	//
;3802:	// impact mark
;3803:	//
;3804:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+180268+540
INDIRI4
NEI4 $2472
ADDRLP4 64
CNSTI4 1
ASGNI4
ADDRGP4 $2473
JUMPV
LABELV $2472
ADDRLP4 64
CNSTI4 0
ASGNI4
LABELV $2473
ADDRLP4 32
ADDRLP4 64
INDIRI4
ASGNI4
line 3805
;3805:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2474
line 3809
;3806:		float	*color;
;3807:
;3808:		// colorize with client color
;3809:		color = cgs.clientinfo[clientNum].color1;
ADDRLP4 68
CNSTI4 2120
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cgs+41152+76
ADDP4
ASGNP4
line 3810
;3810:		CG_ImpactMark( mark, origin, dir, random()*360, color[0],color[1], color[2],1, alphaFade, radius, qfalse );
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 76
ADDRLP4 68
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
INDIRF4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 20
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3811
;3811:	}
ADDRGP4 $2475
JUMPV
LABELV $2474
line 3812
;3812:	else {
line 3813
;3813:		CG_ImpactMark( mark, origin, dir, random()*360, 1,1,1,1, alphaFade, radius, qfalse );
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 20
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3814
;3814:	}
LABELV $2475
line 3815
;3815:}
LABELV $2281
endproc CG_MissileHitWall 116 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 3824
;3816:
;3817:
;3818:/*
;3819:=================
;3820:CG_MissileHitPlayer
;3821:=================
;3822:*/
;3823:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum )
;3824:{
line 3826
;3825:// LEILEI ENHANCEMENT
;3826:	if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2479
line 3827
;3827:		trap_R_LFX_ParticleEffect(14, origin, dir); // that was easy.
CNSTI4 14
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3828
;3828:	}
ADDRGP4 $2480
JUMPV
LABELV $2479
line 3831
;3829:
;3830:	else
;3831:		CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
LABELV $2480
line 3835
;3832:
;3833:	// some weapons will make an explosion with the blood, while
;3834:	// others will just make the blood
;3835:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $2483
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $2483
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2485-16
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2485
address $2484
address $2484
address $2483
address $2483
address $2483
address $2483
address $2483
address $2484
address $2484
address $2484
code
LABELV $2484
line 3843
;3836:	case WP_GRENADE_LAUNCHER:
;3837:	case WP_ROCKET_LAUNCHER:
;3838://#ifdef MISSIONPACK
;3839:	case WP_NAILGUN:
;3840:	case WP_CHAINGUN:
;3841:	case WP_PROX_LAUNCHER:
;3842://#endif
;3843:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3844
;3844:		break;
line 3846
;3845:	default:
;3846:		break;
LABELV $2483
line 3848
;3847:	}
;3848:}
LABELV $2478
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 148 28
line 3866
;3849:
;3850:
;3851:
;3852:/*
;3853:============================================================================
;3854:
;3855:SHOTGUN TRACING
;3856:
;3857:============================================================================
;3858:*/
;3859:
;3860:/*
;3861:================
;3862:CG_ShotgunPellet
;3863:================
;3864:*/
;3865:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum )
;3866:{
line 3875
;3867:	trace_t		tr;
;3868:	int sourceContentType, destContentType;
;3869:
;3870:// LEILEI ENHACNEMENT
;3871:	vec3_t  kapow;
;3872:
;3873:
;3874:
;3875:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76
CNSTP4 0
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 3877
;3876:
;3877:	sourceContentType = CG_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 80
INDIRI4
ASGNI4
line 3878
;3878:	destContentType = CG_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 84
INDIRI4
ASGNI4
line 3881
;3879:
;3880:	// FIXME: should probably move this cruft into CG_BubbleTrail
;3881:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $2489
line 3882
;3882:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2490
line 3883
;3883:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3884
;3884:		}
line 3885
;3885:	}
ADDRGP4 $2490
JUMPV
LABELV $2489
line 3886
;3886:	else if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2494
line 3889
;3887:		trace_t trace;
;3888:
;3889:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 88
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 144
CNSTP4 0
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3890
;3890:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 88+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3893
;3891:
;3892:// LEILEI ENHANCEMENT
;3893:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2495
line 3895
;3894:			// Water Splash
;3895:			VectorCopy( trace.plane.normal, kapow );
ADDRLP4 64
ADDRLP4 88+24
INDIRB
ASGNB 12
line 3896
;3896:			trap_R_LFX_ParticleEffect(19, trace.endpos, kapow); // that was easy.
CNSTI4 19
ARGI4
ADDRLP4 88+12
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3897
;3897:		}
line 3899
;3898:// END LEIHANCMENET
;3899:	}
ADDRGP4 $2495
JUMPV
LABELV $2494
line 3900
;3900:	else if ( destContentType & CONTENTS_WATER ) {
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2502
line 3903
;3901:		trace_t trace;
;3902:
;3903:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 88
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 144
CNSTP4 0
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3904
;3904:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 88+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3907
;3905:
;3906:// LEILEI ENHANCEMENT
;3907:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2506
line 3909
;3908:			// Water Splash
;3909:			VectorCopy( trace.plane.normal, kapow );
ADDRLP4 64
ADDRLP4 88+24
INDIRB
ASGNB 12
line 3910
;3910:			trap_R_LFX_ParticleEffect(19, trace.endpos, kapow); // that was easy.
CNSTI4 19
ARGI4
ADDRLP4 88+12
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 3911
;3911:		}
LABELV $2506
line 3913
;3912:// END LEIHANCMENET
;3913:	}
LABELV $2502
LABELV $2495
LABELV $2490
line 3915
;3914:
;3915:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2511
line 3916
;3916:		return;
ADDRGP4 $2487
JUMPV
LABELV $2511
line 3919
;3917:	}
;3918:
;3919:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
CNSTI4 936
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2514
line 3920
;3920:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 3921
;3921:	}
ADDRGP4 $2515
JUMPV
LABELV $2514
line 3922
;3922:	else {
line 3923
;3923:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2521
line 3925
;3924:			// SURF_NOIMPACT will not make a flame puff or a mark
;3925:			return;
ADDRGP4 $2487
JUMPV
LABELV $2521
line 3927
;3926:		}
;3927:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2524
line 3928
;3928:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3929
;3929:		}
ADDRGP4 $2525
JUMPV
LABELV $2524
line 3930
;3930:		else {
line 3931
;3931:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 88
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 88
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3932
;3932:		}
LABELV $2525
line 3933
;3933:	}
LABELV $2515
line 3934
;3934:}
LABELV $2487
endproc CG_ShotgunPellet 148 28
export CG_ShotgunPattern
proc CG_ShotgunPattern 84 12
line 3947
;3935:
;3936:/*
;3937:================
;3938:CG_ShotgunPattern
;3939:
;3940:Perform the same traces the server did to locate the
;3941:hit splashes
;3942:================
;3943:*/
;3944://unlagged - attack prediction
;3945:// made this non-static for access from cg_unlagged.c
;3946:void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum )
;3947:{
line 3955
;3948:	int			i;
;3949:	float		r, u;
;3950:	vec3_t		end;
;3951:	vec3_t		forward, right, up;
;3952:
;3953:	// derive the right and up vectors from the forward vector, because
;3954:	// the client won't have any other information
;3955:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 3956
;3956:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 3957
;3957:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 3960
;3958:
;3959:	// generate the "random" spread pattern
;3960:	for ( i = 0 ; i < mod_sgcount ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 $2535
JUMPV
LABELV $2532
line 3961
;3961:		r = Q_crandom( &seed ) * mod_sgspread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
CNSTF4 1098907648
ADDRLP4 60
INDIRF4
ADDRGP4 mod_sgspread
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 3962
;3962:		u = Q_crandom( &seed ) * mod_sgspread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
CNSTF4 1098907648
ADDRLP4 64
INDIRF4
ADDRGP4 mod_sgspread
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 3963
;3963:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3964
;3964:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 3965
;3965:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 3967
;3966:
;3967:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 3968
;3968:	}
LABELV $2533
line 3960
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2535
ADDRLP4 56
INDIRI4
ADDRGP4 mod_sgcount
INDIRI4
LTI4 $2532
line 3969
;3969:}
LABELV $2531
endproc CG_ShotgunPattern 84 12
export CG_ShotgunFire
proc CG_ShotgunFire 52 48
line 3977
;3970:
;3971:/*
;3972:==============
;3973:CG_ShotgunFire
;3974:==============
;3975:*/
;3976:void CG_ShotgunFire( entityState_t *es )
;3977:{
line 3981
;3978:	vec3_t	v;
;3979:	int		contents;
;3980:
;3981:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3982
;3982:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3983
;3983:	VectorScale( v, 32, v );
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1107296256
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 3984
;3984:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 3985
;3985:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $2563
line 3989
;3986:		// ragepro can't alpha fade, so don't even bother with smoke
;3987:		vec3_t			up;
;3988:
;3989:		contents = CG_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 3990
;3990:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $2567
line 3991
;3991:			VectorSet( up, 0, 0, 8 );
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 32
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+8
CNSTF4 1090519040
ASGNF4
line 3992
;3992:		}
ADDRGP4 $2568
JUMPV
LABELV $2567
line 3993
;3993:		else {
line 3994
;3994:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 48
CNSTF4 1065353216
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+180268+348
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 3995
;3995:		}
LABELV $2568
line 3997
;3996:
;3997:	}
LABELV $2563
line 3998
;3998:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 3999
;3999:}
LABELV $2552
endproc CG_ShotgunFire 52 48
export CG_Tracer
proc CG_Tracer 224 16
line 4016
;4000:
;4001:/*
;4002:============================================================================
;4003:
;4004:BULLETS
;4005:
;4006:============================================================================
;4007:*/
;4008:
;4009:
;4010:/*
;4011:===============
;4012:CG_Tracer
;4013:===============
;4014:*/
;4015:void CG_Tracer( vec3_t source, vec3_t dest )
;4016:{
line 4025
;4017:	vec3_t		forward, right;
;4018:	polyVert_t	verts[4];
;4019:	vec3_t		line;
;4020:	float		len, begin, end;
;4021:	vec3_t		start, finish;
;4022:	vec3_t		midpoint;
;4023:
;4024:	// tracer
;4025:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4026
;4026:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 196
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 196
INDIRF4
ASGNF4
line 4029
;4027:
;4028:	// start at least a little ways from the muzzle
;4029:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $2577
line 4030
;4030:		return;
ADDRGP4 $2574
JUMPV
LABELV $2577
line 4032
;4031:	}
;4032:	begin = 50 + random() * (len - 60);
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 4033
;4033:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 4034
;4034:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $2580
line 4035
;4035:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 4036
;4036:	}
LABELV $2580
line 4037
;4037:	VectorMA( source, begin, forward, start );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 4038
;4038:	VectorMA( source, end, forward, finish );
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 212
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 4040
;4039:
;4040:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109252+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109252+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109252+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4041
;4041:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109252+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109252+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109252+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4043
;4042:
;4043:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109252+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109252+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109252+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 4044
;4044:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 220
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109252+36+24
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109252+36+24+4
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109252+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 4045
;4045:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4047
;4046:
;4047:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4048
;4048:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 4049
;4049:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 4050
;4050:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 4051
;4051:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 4052
;4052:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 4053
;4053:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 4055
;4054:
;4055:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 4056
;4056:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 4057
;4057:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 4058
;4058:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 4059
;4059:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 4060
;4060:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 4061
;4061:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 4063
;4062:
;4063:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 4064
;4064:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 4065
;4065:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 4066
;4066:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 4067
;4067:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 4068
;4068:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 4069
;4069:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 4071
;4070:
;4071:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4072
;4072:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 4073
;4073:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 4074
;4074:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 4075
;4075:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 4076
;4076:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 4077
;4077:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 4079
;4078:
;4079:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+180268+284
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 4081
;4080:
;4081:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
CNSTF4 1056964608
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
MULF4
ASGNF4
line 4082
;4082:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
CNSTF4 1056964608
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
MULF4
ASGNF4
line 4083
;4083:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
CNSTF4 1056964608
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
MULF4
ASGNF4
line 4086
;4084:
;4085:	// add the tracer sound
;4086:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+180268+808
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 4088
;4087:
;4088:}
LABELV $2574
endproc CG_Tracer 224 16
proc CG_CalcMuzzlePoint 40 16
line 4097
;4089:
;4090:
;4091:/*
;4092:======================
;4093:CG_CalcMuzzlePoint
;4094:======================
;4095:*/
;4096:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle )
;4097:{
line 4102
;4098:	vec3_t		forward;
;4099:	centity_t	*cent;
;4100:	int			anim;
;4101:
;4102:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $2762
line 4103
;4103:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 4104
;4104:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 4105
;4105:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 4106
;4106:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4107
;4107:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $2761
JUMPV
LABELV $2762
line 4110
;4108:	}
;4109:
;4110:	cent = &cg_entities[entityNum];
ADDRLP4 12
CNSTI4 936
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 4111
;4111:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2770
line 4112
;4112:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2761
JUMPV
LABELV $2770
line 4115
;4113:	}
;4114:
;4115:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 4117
;4116:
;4117:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 4118
;4118:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 4119
;4119:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $2774
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $2772
LABELV $2774
line 4120
;4120:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 4121
;4121:	}
ADDRGP4 $2773
JUMPV
LABELV $2772
line 4122
;4122:	else {
line 4123
;4123:		if (cg_enableQ.integer)
ADDRGP4 cg_enableQ+12
INDIRI4
CNSTI4 0
EQI4 $2775
line 4124
;4124:			muzzle[2] += QUACK_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1102053376
ADDF4
ASGNF4
ADDRGP4 $2776
JUMPV
LABELV $2775
line 4126
;4125:		else
;4126:			muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
LABELV $2776
line 4127
;4127:	}
LABELV $2773
line 4129
;4128:
;4129:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4131
;4130:
;4131:	return qtrue;
CNSTI4 1
RETI4
LABELV $2761
endproc CG_CalcMuzzlePoint 40 16
export CG_Bullet
proc CG_Bullet 108 28
line 4143
;4132:
;4133:}
;4134:
;4135:/*
;4136:======================
;4137:CG_Bullet
;4138:
;4139:Renders bullet effects.
;4140:======================
;4141:*/
;4142:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum )
;4143:{
line 4155
;4144:	trace_t trace;
;4145:	int sourceContentType, destContentType;
;4146:	vec3_t		start;
;4147:// LEILEI ENHACNEMENT
;4148:	vec3_t  kapow;
;4149:
;4150:
;4151:
;4152:
;4153:	// if the shooter is currently valid, calc a source point and possibly
;4154:	// do trail effects
;4155:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $2781
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $2781
line 4156
;4156:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 88
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $2784
line 4157
;4157:			sourceContentType = CG_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 92
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 92
INDIRI4
ASGNI4
line 4158
;4158:			destContentType = CG_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 96
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 96
INDIRI4
ASGNI4
line 4161
;4159:
;4160:			// do a complete bubble trail if necessary
;4161:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 100
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 100
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $2786
ADDRLP4 100
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2786
line 4162
;4162:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4163
;4163:			}
ADDRGP4 $2787
JUMPV
LABELV $2786
line 4165
;4164:			// bubble trail from water into air
;4165:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2788
line 4166
;4166:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 104
CNSTP4 0
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 4167
;4167:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4171
;4168:
;4169:
;4170:// LEILEI ENHANCEMENT
;4171:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2789
line 4173
;4172:					// Water Splash
;4173:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 76
ADDRLP4 20+24
INDIRB
ASGNB 12
line 4174
;4174:					trap_R_LFX_ParticleEffect(19, trace.endpos, kapow); // that was easy.
CNSTI4 19
ARGI4
ADDRLP4 20+12
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 4175
;4175:				}
line 4179
;4176:// END LEIHANCMENET
;4177:
;4178:
;4179:			}
ADDRGP4 $2789
JUMPV
LABELV $2788
line 4181
;4180:			// bubble trail from air into water
;4181:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2796
line 4182
;4182:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 104
CNSTP4 0
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 4183
;4183:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4186
;4184:
;4185:// LEILEI ENHANCEMENT
;4186:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2799
line 4188
;4187:					// Water Splash
;4188:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 76
ADDRLP4 20+24
INDIRB
ASGNB 12
line 4189
;4189:					trap_R_LFX_ParticleEffect(19, trace.endpos, kapow); // that was easy.
CNSTI4 19
ARGI4
ADDRLP4 20+12
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 4190
;4190:				}
LABELV $2799
line 4192
;4191:// END LEIHANCMENET
;4192:			}
LABELV $2796
LABELV $2789
LABELV $2787
line 4195
;4193:
;4194:			// draw a tracer
;4195:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $2804
line 4196
;4196:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 4197
;4197:			}
LABELV $2804
line 4198
;4198:		}
LABELV $2784
line 4199
;4199:	}
LABELV $2781
line 4202
;4200:
;4201:	// impact splash and mark
;4202:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $2807
line 4204
;4203:// LEILEI ENHANCEMENT
;4204:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2809
line 4206
;4205:
;4206:			trap_R_LFX_ParticleEffect(14, end, normal); // that was easy.
CNSTI4 14
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_LFX_ParticleEffect
CALLV
pop
line 4208
;4207:
;4208:		}
ADDRGP4 $2808
JUMPV
LABELV $2809
line 4211
;4209:
;4210:		else
;4211:			CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 4212
;4212:	}
ADDRGP4 $2808
JUMPV
LABELV $2807
line 4213
;4213:	else {
line 4214
;4214:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 88
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 88
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4216
;4215:
;4216:	}
LABELV $2808
line 4218
;4217:
;4218:}
LABELV $2780
endproc CG_Bullet 108 28
import CG_IsARoundBasedGametype
import CG_UsesTheWhiteFlag
import CG_UsesTeamFlags
import CG_IsATeamGametype
import trap_R_LFX_ParticleEffect
import wideAdjustX
import initparticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import addChallenge
import getChallenge
import challenges_save
import challenges_init
import CG_DrawTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_SpurtBlood
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_FairCvars
import SnapVectorTowards
import CG_GetCVar
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_developer
import cg_leiChibi
import cg_missionpackChecks
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableFS
import cg_enableQ
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_modelEyes_Fwd
import cg_modelEyes_Right
import cg_modelEyes_Up
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_deathcam
import cg_leiDebug
import cg_muzzleflashStyle
import cg_leiSuperGoreyAwesome
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_obituaryOutput
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewnudge
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_kickScale
import cg_bobmodel
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_bob
import cg_runroll
import cg_runpitch
import cg_centertime
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import MapInfoGet
import MatchesGametype
import BG_TeamName
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Q_StrToLower
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $2255
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $2227
byte 1 47
byte 1 0
align 1
LABELV $1818
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1141
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $1071
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1009
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $912
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $711
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $704
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $703
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $700
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $699
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $697
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $692
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $689
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $688
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $686
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $683
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $680
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $679
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $677
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 119
byte 1 110
byte 1 97
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $676
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $672
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $671
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $669
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $666
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 47
byte 1 119
byte 1 115
byte 1 116
byte 1 98
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $665
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $663
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $660
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $659
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $658
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $656
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $652
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $651
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $650
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $649
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $647
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $644
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $643
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $642
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $641
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $640
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $638
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 117
byte 1 108
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $637
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $636
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 82
byte 1 111
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $633
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 47
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $631
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $628
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $625
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $622
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $619
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $616
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $615
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $614
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $612
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $611
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $607
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $604
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $603
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $602
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 53
byte 1 97
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $599
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 53
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $596
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 52
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $593
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 51
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $590
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 97
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $587
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $584
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 117
byte 1 122
byte 1 122
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $581
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 53
byte 1 97
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $580
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 53
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $579
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 52
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $578
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 51
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $577
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 97
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $576
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $575
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $574
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $571
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $557
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
